/*
      timeout: 0,
      data: null,
      dataType: null,
      username: null,
      password: null,
      cache: null,
      throws: false,
      traditional: false,
      headers: {},
      */

/*
   * Create a callback list using the following parameters:
   *
   *	options: an optional list of space-separated options that will change how
   *			the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *	once:			will ensure the callback list can only be fired once (like a Deferred)
   *
   *	memory:			will keep track of previous values and will call any callback added
   *					after the list has been fired right away with the latest "memorized"
   *					values (like a Deferred)
   *
   *	unique:			will ensure a callback can only be added once (no duplicate in the list)
   *
   *	stopOnFalse:	interrupt callings when a callback returns false
   *
   */

/*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */

/*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */

/*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

/*  */

/* , ...args */

/* , end */

/* , endPosition = @length */

/* , fillString = ' ' */

/* , fromIndex */

/* , fromIndex = 0 */

/* , fromIndex = @[*-1] */

/* , initialValue */

/* , littleEndian */

/* , mapfn = undefined, thisArg = undefined */

/* , mapfn, thisArg */

/* , newTarget */

/* , offset */

/* , position = 0 */

/* , receiver */

/* , start = 0, end = @length */

/* , start, end */

/* , that = undefined */

/* , thisArg */

/* . */

/* 0 */

/* 1 */

/* 10 */

/* 100 */

/* 101 */

/* 102 */

/* 103 */

/* 104 */

/* 105 */

/* 106 */

/* 107 */

/* 108 */

/* 109 */

/* 11 */

/* 110 */

/* 111 */

/* 112 */

/* 113 */

/* 114 */

/* 115 */

/* 116 */

/* 117 */

/* 118 */

/* 119 */

/* 12 */

/* 120 */

/* 121 */

/* 122 */

/* 123 */

/* 124 */

/* 125 */

/* 126 */

/* 127 */

/* 128 */

/* 129 */

/* 13 */

/* 130 */

/* 131 */

/* 132 */

/* 133 */

/* 134 */

/* 135 */

/* 136 */

/* 137 */

/* 138 */

/* 139 */

/* 14 */

/* 140 */

/* 141 */

/* 142 */

/* 143 */

/* 144 */

/* 145 */

/* 146 */

/* 147 */

/* 148 */

/* 149 */

/* 15 */

/* 150 */

/* 151 */

/* 152 */

/* 153 */

/* 154 */

/* 155 */

/* 156 */

/* 157 */

/* 158 */

/* 159 */

/* 16 */

/* 160 */

/* 161 */

/* 162 */

/* 163 */

/* 164 */

/* 165 */

/* 166 */

/* 167 */

/* 168 */

/* 169 */

/* 17 */

/* 170 */

/* 171 */

/* 172 */

/* 173 */

/* 174 */

/* 175 */

/* 176 */

/* 177 */

/* 178 */

/* 179 */

/* 18 */

/* 180 */

/* 181 */

/* 182 */

/* 183 */

/* 184 */

/* 185 */

/* 186 */

/* 187 */

/* 188 */

/* 189 */

/* 19 */

/* 190 */

/* 191 */

/* 192 */

/* 193 */

/* 194 */

/* 195 */

/* 196 */

/* 197 */

/* 198 */

/* 199 */

/* 2 */

/* 20 */

/* 200 */

/* 201 */

/* 202 */

/* 203 */

/* 204 */

/* 205 */

/* 206 */

/* 207 */

/* 208 */

/* 209 */

/* 21 */

/* 210 */

/* 211 */

/* 212 */

/* 213 */

/* 214 */

/* 215 */

/* 216 */

/* 217 */

/* 218 */

/* 219 */

/* 22 */

/* 220 */

/* 221 */

/* 222 */

/* 223 */

/* 224 */

/* 225 */

/* 226 */

/* 227 */

/* 228 */

/* 229 */

/* 23 */

/* 230 */

/* 231 */

/* 232 */

/* 233 */

/* 234 */

/* 235 */

/* 236 */

/* 237 */

/* 238 */

/* 239 */

/* 24 */

/* 240 */

/* 241 */

/* 242 */

/* 243 */

/* 244 */

/* 245 */

/* 246 */

/* 247 */

/* 248 */

/* 249 */

/* 25 */

/* 250 */

/* 251 */

/* 252 */

/* 253 */

/* 254 */

/* 255 */

/* 256 */

/* 257 */

/* 258 */

/* 259 */

/* 26 */

/* 260 */

/* 261 */

/* 262 */

/* 263 */

/* 264 */

/* 265 */

/* 266 */

/* 267 */

/* 268 */

/* 269 */

/* 27 */

/* 270 */

/* 271 */

/* 272 */

/* 273 */

/* 274 */

/* 275 */

/* 276 */

/* 277 */

/* 278 */

/* 279 */

/* 28 */

/* 280 */

/* 281 */

/* 282 */

/* 283 */

/* 284 */

/* 285 */

/* 286 */

/* 287 */

/* 288 */

/* 289 */

/* 29 */

/* 290 */

/* 291 */

/* 292 */

/* 293 */

/* 294 */

/* 295 */

/* 296 */

/* 297 */

/* 298 */

/* 299 */

/* 3 */

/* 30 */

/* 300 */

/* 301 */

/* 302 */

/* 303 */

/* 304 */

/* 305 */

/* 306 */

/* 307 */

/* 308 */

/* 309 */

/* 31 */

/* 310 */

/* 311 */

/* 312 */

/* 313 */

/* 314 */

/* 315 */

/* 316 */

/* 317 */

/* 318 */

/* 319 */

/* 32 */

/* 320 */

/* 321 */

/* 322 */

/* 323 */

/* 324 */

/* 325 */

/* 326 */

/* 327 */

/* 328 */

/* 329 */

/* 33 */

/* 330 */

/* 331 */

/* 332 */

/* 333 */

/* 334 */

/* 335 */

/* 336 */

/* 337 */

/* 338 */

/* 339 */

/* 34 */

/* 340 */

/* 341 */

/* 342 */

/* 343 */

/* 344 */

/* 345 */

/* 346 */

/* 347 */

/* 348 */

/* 349 */

/* 35 */

/* 350 */

/* 351 */

/* 352 */

/* 353 */

/* 354 */

/* 355 */

/* 356 */

/* 36 */

/* 37 */

/* 38 */

/* 39 */

/* 4 */

/* 40 */

/* 41 */

/* 42 */

/* 43 */

/* 44 */

/* 45 */

/* 46 */

/* 47 */

/* 48 */

/* 49 */

/* 5 */

/* 50 */

/* 51 */

/* 52 */

/* 53 */

/* 54 */

/* 55 */

/* 56 */

/* 57 */

/* 58 */

/* 59 */

/* 6 */

/* 60 */

/* 61 */

/* 62 */

/* 63 */

/* 64 */

/* 65 */

/* 66 */

/* 67 */

/* 68 */

/* 69 */

/* 7 */

/* 70 */

/* 71 */

/* 72 */

/* 73 */

/* 74 */

/* 75 */

/* 76 */

/* 77 */

/* 78 */

/* 79 */

/* 8 */

/* 80 */

/* 81 */

/* 82 */

/* 83 */

/* 84 */

/* 85 */

/* 86 */

/* 87 */

/* 88 */

/* 89 */

/* 9 */

/* 90 */

/* 91 */

/* 92 */

/* 93 */

/* 94 */

/* 95 */

/* 96 */

/* 97 */

/* 98 */

/* 99 */

/* = 0 */

/* = 0, end = @length */

/* Attributes
      ---------------------------------------------------------------------- */

/* Chain conversions given the request and the original response
   * Also sets the responseXXX fields on the jqXHR instance
   */

/* Contains
      ---------------------------------------------------------------------- */

/* Handles responses to an ajax request:
   * - finds the right dataType (mediates between content-type and expected dataType)
   * - returns the corresponding response
   */

/* Ignore */

/* Internal Use Only */

/* Prefilters
   * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
   * 2) These are called:
   *    - BEFORE asking for a transport
   *    - AFTER param serialization (s.data is a string if s.processData is true)
   * 3) key is the dataType
   * 4) the catchall symbol "*" can be used
   * 5) execution will start with transport dataType and THEN continue down to "*" if needed
   */

/* QSA/matchesSelector
      ---------------------------------------------------------------------- */

/* Sorting
      ---------------------------------------------------------------------- */

/* Transports bindings
   * 1) key is the dataType
   * 2) the catchall symbol "*" can be used
   * 3) selection will start with transport dataType and THEN go to "*" if needed
   */

/* Vue component instance */

/* WEBPACK VAR INJECTION */

/* asRootData */

/* direct */

/* empty */

/* eslint no-unused-expressions: "off" */

/* eslint-disable eqeqeq */

/* eslint-disable no-cond-assign */

/* eslint-disable no-loop-func */

/* eslint-disable no-proto */

/* eslint-disable no-self-compare */

/* eslint-disable no-unused-vars */

/* eslint-enable eqeqeq */

/* eslint-enable no-cond-assign */

/* eslint-enable no-loop-func */

/* eslint-enable no-proto */

/* eslint-enable no-self-compare */

/* eslint-enable no-unused-vars */

/* getElement(s)By*
      ---------------------------------------------------------------------- */

/* getStatic */

/* global Symbol */

/* globals __VUE_SSR_CONTEXT__ */

/* globals __webpack_amd_options__ */

/* harmony default export */

/* harmony export (binding) */

/* harmony import */

/* hot reload */

/* hydrating */

/* isRenderWatcher */

/* istanbul ignore else */

/* istanbul ignore if */

/* istanbul ignore next */

/* istanbul ignore next, $flow-disable-line */

/* jshint -W018 */

/* jshint boss:true */

/* jshint eqnull:true */

/* jshint loopfunc:true */

/* matches from matchExpr["CHILD"]
          	1 type (only|nth|...)
          	2 what (child|of-type)
          	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
          	4 xn-component of xn+y argument ([+-]?\d*n|)
          	5 sign of xn-component
          	6 x of xn-component
          	7 sign of y-component
          	8 y of y-component
          */

/* noop */

/* normalize component */

/* removeOnly */

/* server only */

/* true */

/* unused harmony export Store */

/* unused harmony export createLogger */

/* unused harmony export createNamespacedHelpers */

/* unused harmony export install */

/* unused harmony export mapActions */

/* vue-cli only */

/*!
   * Sizzle CSS Selector Engine v2.3.5
   * https://sizzlejs.com/
   *
   * Copyright JS Foundation and other contributors
   * Released under the MIT license
   * https://js.foundation/
   *
   * Date: 2020-03-14
   */

/*!
  * Bootstrap v4.5.3 (https://getbootstrap.com/)
  * Copyright 2011-2020 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */

/*!
  * vue-router v3.4.9
  * (c) 2020 Evan You
  * @license MIT
  */

/*!
 * Vue.js v2.6.12
 * (c) 2014-2020 Evan You
 * Released under the MIT License.
 */

/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */

/*!
 * vuex v3.5.1
 * (c) 2020 Evan You
 * @license MIT
 */

/*#__PURE__*/

/**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */

/**
         * Check for Popper dependency
         * Popper - https://popper.js.org
         */

/**
       * Deselects the provided multi-drag item
       * @param  {HTMLElement} el    The element to be deselected
       */

/**
       * Selects the provided multi-drag item
       * @param  {HTMLElement} el    The element to be selected
       */

/**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */

/**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */

/**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */

/**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */

/**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */

/**
       * `document` has 2 events `EVENT_FOCUSIN` and `EVENT_CLICK_DATA_API`
       * Do not move `document` in `htmlElements` array
       * It will remove `EVENT_CLICK_DATA_API` event that should remain
       */

/**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */

/**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */

/**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */

/**
     * @prop {Boolean} flipVariations=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the reference element overlaps its boundaries.
     *
     * The original placement should have a set variation.
     */

/**
     * @prop {Boolean} flipVariationsByContent=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the popper element overlaps its reference boundaries.
     *
     * The original placement should have a set variation.
     */

/**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */

/**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations)
     */

/**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier. Can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */

/**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position.
     * The popper will never be placed outside of the defined boundaries
     * (except if `keepTogether` is enabled)
     */

/**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper. This makes sure the popper always has a little padding
     * between the edges of its container
     */

/**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */

/**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */

/**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */

/**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */

/**
     * A low-level selection function that works with Sizzle's compiled
     *  selector functions
     * @param {String|Function} selector A selector or a pre-compiled
     *  selector function built with Sizzle.compile
     * @param {Element} context
     * @param {Array} [results]
     * @param {Array} [seed] A set of elements to match against
     */

/**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */

/**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */

/**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */

/**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */

/**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */

/**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */

/**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */

/**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */

/**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */

/**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */

/**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */

/**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */

/**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */

/**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */

/**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */

/**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */

/**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */

/**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */

/**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */

/**
     * Adds the same handler for all of the specified attrs
     * @param {String} attrs Pipe-separated list of attributes
     * @param {Function} handler The method that will be applied
     */

/**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */

/**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */

/**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */

/**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */

/**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */

/**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */

/**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */

/**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */

/**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */

/**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */

/**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */

/**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */

/**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */

/**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */

/**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */

/**
     * Checks a node for validity as a Sizzle context
     * @param {Element|Object=} context
     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
     */

/**
     * Checks document order of two siblings
     * @param {Element} a
     * @param {Element} b
     * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
     */

/**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */

/**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */

/**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */

/**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */

/**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */

/**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */

/**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */

/**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */

/**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */

/**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */

/**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */

/**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */

/**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */

/**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */

/**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */

/**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */

/**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */

/**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */

/**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */

/**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */

/**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */

/**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */

/**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */

/**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */

/**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */

/**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */

/**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */

/**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */

/**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */

/**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */

/**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */

/**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */

/**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */

/**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */

/**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */

/**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */

/**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */

/**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */

/**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */

/**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */

/**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */

/**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */

/**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */

/**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */

/**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */

/**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */

/**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */

/**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */

/**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */

/**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */

/**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */

/**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */

/**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */

/**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */

/**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */

/**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */

/**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */

/**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */

/**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */

/**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */

/**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */

/**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */

/**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */

/**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */

/**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */

/**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */

/**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */

/**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */

/**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */

/**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */

/**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */

/**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */

/**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */

/**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */

/**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */

/**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */

/**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */

/**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */

/**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */

/**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */

/**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */

/**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */

/**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */

/**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */

/**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */

/**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */

/**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */

/**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */

/**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */

/**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */

/**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */

/**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */

/**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */

/**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */

/**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */

/**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */

/**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */

/**
     * Create key-value caches of limited size
     * @returns {function(string, object)} Returns the Object data after storing it on itself with
     *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
     *	deleting the oldest entry
     */

/**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */

/**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */

/**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */

/**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */

/**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */

/**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */

/**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */

/**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */

/**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */

/**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */

/**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */

/**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */

/**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */

/**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */

/**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */

/**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */

/**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */

/**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */

/**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */

/**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */

/**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */

/**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */

/**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */

/**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */

/**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */

/**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */

/**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */

/**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */

/**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */

/**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */

/**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */

/**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */

/**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */

/**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */

/**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */

/**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */

/**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */

/**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */

/**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */

/**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */

/**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */

/**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */

/**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */

/**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */

/**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */

/**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */

/**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */

/**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */

/**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */

/**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */

/**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */

/**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */

/**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */

/**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */

/**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */

/**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */

/**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */

/**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */

/**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */

/**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */

/**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */

/**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */

/**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */

/**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */

/**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */

/**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */

/**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */

/**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */

/**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */

/**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */

/**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */

/**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */

/**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */

/**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */

/**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */

/**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */

/**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */

/**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */

/**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */

/**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */

/**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */

/**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */

/**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */

/**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */

/**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */

/**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */

/**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */

/**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */

/**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */

/**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */

/**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */

/**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */

/**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */

/**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */

/**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */

/**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */

/**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */

/**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */

/**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */

/**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */

/**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */

/**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */

/**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */

/**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */

/**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */

/**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */

/**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */

/**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */

/**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */

/**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */

/**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */

/**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */

/**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */

/**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */

/**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */

/**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */

/**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */

/**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */

/**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */

/**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */

/**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */

/**
     * Detects XML nodes
     * @param {Element|Object} elem An element or a document
     * @returns {Boolean} True iff elem is a non-HTML XML node
     */

/**
     * Document sorting and removing duplicates
     * @param {ArrayLike} results
     */

/**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */

/**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */

/**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */

/**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */

/**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */

/**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */

/**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */

/**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */

/**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */

/**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */

/**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */

/**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */

/**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */

/**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */

/**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */

/**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */

/**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */

/**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */

/**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */

/**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */

/**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */

/**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */

/**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */

/**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */

/**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */

/**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */

/**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */

/**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */

/**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */

/**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */

/**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */

/**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */

/**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */

/**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */

/**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */

/**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */

/**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */

/**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */

/**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */

/**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */

/**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */

/**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */

/**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */

/**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */

/**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */

/**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */

/**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */

/**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */

/**
     * Mark a function for special use by Sizzle
     * @param {Function} fn The function to mark
     */

/**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */

/**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */

/**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */

/**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */

/**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */

/**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */

/**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */

/**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */

/**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */

/**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */

/**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */

/**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */

/**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */

/**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */

/**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */

/**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */

/**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */

/**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */

/**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */

/**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */

/**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */

/**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */

/**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */

/**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */

/**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */

/**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */

/**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */

/**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */

/**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */

/**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */

/**
     * Returns a function to use in pseudos for :enabled/:disabled
     * @param {Boolean} disabled true for :disabled; false for :enabled
     */

/**
     * Returns a function to use in pseudos for buttons
     * @param {String} type
     */

/**
     * Returns a function to use in pseudos for input types
     * @param {String} type
     */

/**
     * Returns a function to use in pseudos for positionals
     * @param {Function} fn
     */

/**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */

/**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */

/**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */

/**
     * Schedules an update. It will run on the next UI update available.
     * @method scheduleUpdate
     * @memberof Popper
     */

/**
     * Sets document-related variables once based on the current document
     * @param {Element|Object} [doc] An element or document object to use to set the document
     * @returns {Object} Returns the current document
     */

/**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */

/**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */

/**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */

/**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */

/**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */

/**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */

/**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */

/**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */

/**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */

/**
     * Support testing using an element
     * @param {Function} fn Passed the created element and returns a boolean result
     */

/**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */

/**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */

/**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */

/**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */

/**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */

/**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */

/**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */

/**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */

/**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */

/**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */

/**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */

/**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */

/**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */

/**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */

/**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */

/**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */

/**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */

/**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */

/**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */

/**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */

/**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */

/**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */

/**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */

/**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */

/**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */

/**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */

/**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */

/**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */

/**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */

/**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */

/**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */

/**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */

/**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */

/**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */

/**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */

/**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */

/**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */

/**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */

/**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */

/**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */

/**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */

/**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */

/**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */

/**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */

/**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */

/**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */

/**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */

/**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */

/**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */

/**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */

/**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */

/**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */

/**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */

/**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */

/**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */

/**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */

/**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */

/**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */

/**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */

/**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */

/**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */

/**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */

/**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */

/**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */

/**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */

/**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */

/**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */

/**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */

/**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */

/**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */

/**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */

/**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */

/**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */

/**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */

/**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */

/**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */

/**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */

/**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */

/**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */

/**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */

/**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */

/**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */

/**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */

/**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */

/**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */

/**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */

/**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */

/**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */

/**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */

/**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */

/**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */

/**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */

/**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */

/**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */

/**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */

/**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */

/**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */

/**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */

/**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */

/**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */

/**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */

/**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */

/**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */

/**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */

/**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */

/**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */

/**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */

/**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */

/**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */

/**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */

/**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */

/**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */

/**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */

/**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */

/**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */

/**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */

/**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */

/**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */

/**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */

/**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */

/**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */

/**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */

/**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */

/**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */

/**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */

/**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */

/**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */

/**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */

/**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */

/**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */

/**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */

/**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */

/**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */

/**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */

/**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */

/**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */

/**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */

/**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */

/**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */

/**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */

/**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */

/**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */

/**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */

/**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */

/**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */

/**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */

/**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */

/**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */

/**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */

/**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */

/**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */

/**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */

/**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */

/**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */

/**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */

/**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */

/**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */

/**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */

/**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */

/**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */

/**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */

/**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */

/**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */

/**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */

/**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */

/**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */

/**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */

/**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */

/**
     * Utility function for retrieving the text value of an array of DOM nodes
     * @param {Array|Element} elem
     */

/**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

/**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */

/**
   * ------------------------------------------------------------------------
   * Private TransitionEnd Helpers
   * ------------------------------------------------------------------------
   */

/**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

/**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.5.3): tools/sanitizer.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

/**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.5.3): util.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

/**
   * --------------------------------------------------------------------------
   * Public Util Api
   * --------------------------------------------------------------------------
   */

/**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */

/**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */

/**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */

/**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */

/**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */

/**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */

/**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

/**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

/**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */

/**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */

/**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */

/**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */

/**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */

/**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */

/**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */

/**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define your own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */

/**
   * Callback called when the popper is created.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */

/**
   * Callback called when the popper is updated. This callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */

/**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */

/**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */

/**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */

/**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */

/**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */

/**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */

/**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

/**
   * Class inheritance
   */

/**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */

/**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */

/**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */

/**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */

/**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */

/**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

/**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

/**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

/**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */

/**
   * Create asset registration methods.
   */

/**
   * Creates a new Popper.js instance.
   * @class Popper
   * @param {Element|referenceObject} reference - The reference element used to position the popper
   * @param {Element} popper - The HTML / XML element used as the popper
   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
   * @return {Object} instance - The generated Popper.js instance
   */

/**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */

/**
   * Custom user key aliases for v-on
   */

/**
   * Destroy
   */

/**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */

/**
   * Error handler for watcher errors
   */

/**
   * Exposed for legacy reasons
   */

/**
   * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
   * @param   {HTMLElement}  el
   * @param   {String}       [selector]  default: `options.draggable`
   * @returns {HTMLElement|null}
   */

/**
   * Get the namespace of an element
   */

/**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */

/**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */

/**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */

/**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */

/**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */

/**
   * Ignore certain custom elements
   */

/**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js.
   * @prop {modifiers}
   */

/**
   * Load a url into a page
   */

/**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */

/**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */

/**
   * Modifier used to make sure the reference and its popper stay near each other
   * without leaving any gap between the two. Especially useful when the arrow is
   * enabled and you want to ensure that it points to its reference element.
   * It cares only about the first axis. You can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */

/**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */

/**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * A scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" — or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */

/**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */

/**
   * Option merge strategies (used in core/util/options)
   */

/**
   * Parse the real tag name for the specific platform.
   */

/**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */

/**
   * Popper's placement.
   * @prop {Popper.placements} placement='bottom'
   */

/**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */

/**
   * Save the current sorting
   */

/**
   * Serializes the item into an array of string.
   * @returns {String[]}
   */

/**
   * Set this to true if you want popper to position it self in 'fixed' mode
   * @prop {Boolean} positionFixed=false
   */

/**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */

/**
   * Set/get option
   * @param   {string} name
   * @param   {*}      [value]
   * @returns {*}
   */

/**
   * Show production mode tip message on boot?
   */

/**
   * Sorts the elements according to the array.
   * @param  {String[]}  order  order of the items
   */

/**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */

/**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */

/**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unit-less, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the `height`.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
   *
   * @memberof modifiers
   * @inner
   */

/**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

/**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

/**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */

/**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */

/**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */

/**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */

/**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */

/**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */

/**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */

/**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */

/**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */

/**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */

/**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */

/**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */

/**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */

/**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

/**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjunction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */

/**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */

/**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */

/**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */

/**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */

/**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */

/**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */

/**
   * Vuex init hook, injected into each instances init hooks list.
   */

/**
   * Warn handler for watcher warns
   */

/**
   * Whether events (resize, scroll) are initially enabled.
   * @prop {Boolean} eventsEnabled=true
   */

/**
   * Whether to enable devtools
   */

/**
   * Whether to record perf
   */

/**
   * Whether to suppress warnings.
   */

/**
  * Determine if a URL shares the same origin as the current location
  *
  * @param {String} requestURL The URL to test
  * @returns {boolean} True if URL shares the same origin, otherwise false
  */

/**
  * Parse a URL to discover it's components
  *
  * @param {String} url The URL to be parsed
  * @returns {Object}
  */

/**
 * @class  Sortable
 * @param  {HTMLElement}  el
 * @param  {Object}       [options]
 */

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} data.styles - List of style properties - values to apply to popper element
 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The same data object
 */

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @argument {Number|String} options.offset=0
 * The offset value as described in the modifier description
 * @returns {Object} The data object, properly modified
 */

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

/**
 * @function
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Boolean} shouldRound - If the offsets should be rounded at all
 * @returns {Object} The popper's position offsets rounded
 *
 * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
 * good as it can be within reason.
 * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
 *
 * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
 * as well on High DPI screens).
 *
 * Firefox prefers no rounding for positioning and does not have blurriness on
 * high DPI screens.
 *
 * Only horizontal placement and left/right values need to be considered.
 */

/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */

/**
 * Add a dependency to this directive.
 */

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */

/**
 * Always return false.
 */

/**
 * Assert whether a prop is valid.
 */

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */

/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */

/**
 * Camelize a hyphen-delimited string.
 */

/**
 * Check if a string starts with $ or _
 */

/**
 * Check if a tag is a built-in tag.
 */

/**
 * Check if an attribute is a reserved attribute.
 */

/**
 * Check if the given element is fixed or is inside a fixed parent
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {Element} customContainer
 * @returns {Boolean} answer to "isFixed?"
 */

/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */

/**
 * Check if val is a valid array index.
 */

/**
 * Check if value is primitive.
 */

/**
 * Check whether an object has the property.
 */

/**
 * Checks if a side of an element is scrolled past a side of its parents
 * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question
 * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')
 * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')
 * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element
 */

/**
 * Clean up for dependency collection.
 */

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */

/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} popper
 * @param {HTMLElement} reference
 * @param {number} padding
 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
 * @param {Boolean} fixedPosition - Is in fixed position mode
 * @returns {Object} Coordinates of the boundaries
 */

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */

/**
 * Convert HTML string to AST.
 */

/**
 * Convert a value to a string that is actually rendered.
 */

/**
 * Convert an Array-like object to a real Array.
 */

/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */

/**
 * Converts a string containing value + unit into a px value number
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} str - Value + unit string
 * @argument {String} measurement - `height` or `width`
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @returns {Number|String}
 * Value in pixels, or original string if no values were extracted
 */

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Create a cached version of a pure function.
 */

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */

/**
 * Create sortable instance
 * @param {HTMLElement}  el
 * @param {Object}      [options]
 */

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

/**
 * Cross-platform code generation for component v-model
 */

/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */

/**
 * Data
 */

/**
 * Deep copy the given object considering circular structure.
 * This function caches all nested objects and its copies.
 * If it detects circular structure, use cached copy to avoid infinite loop.
 *
 * @param {*} obj
 * @param {Array<Object>} cache
 * @return {*}
 */

/**
 * Default options provided to Popper.js constructor.<br />
 * These can be overridden using the `options` argument of Popper.js.<br />
 * To override an option, simply pass an object with the same
 * structure of the `options` object, as the 3rd argument. For example:
 * ```
 * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
 * ```
 * @type {Object}
 * @static
 * @memberof Popper
 */

/**
 * Default strategy.
 */

/**
 * Define a property.
 */

/**
 * Define a reactive property on an Object.
 */

/**
 * Delete a property and trigger change if necessary.
 */

/**
 * Depend on all deps collected by this watcher.
 */

/**
 * Destroys the popper.
 * @method
 * @memberof Popper
 */

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */

/**
 * Determines if the browser is Internet Explorer
 * @method
 * @memberof Popper.Utils
 * @param {Number} version to check
 * @returns {Boolean} isIE
 */

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * Ensure a function is called only once.
 */

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */

/**
 * Evaluate the getter, and re-collect dependencies.
 */

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */

/**
 * Expose `pathToRegexp`.
 */

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */

/**
 * Expose a method for transforming tokens into the path function.
 */

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */

/**
 * Finds the first parent of an element that has a transformed property defined
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} first transformed parent or documentElement
 */

/**
 * Finds the offset parent common to the two provided nodes
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element1
 * @argument {Element} element2
 * @returns {Element} common offset parent
 */

/**
 * Finds the root node (document, shadowDOM root) of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} node
 * @returns {Element} root node
 */

/**
 * Flush both queues and run the watchers.
 */

/**
 * Function equal to merge with the difference being that no reference
 * to original objects is kept.
 *
 * @see merge
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */

/**
 * Generate a string containing static keys from compiler modules.
 */

/**
 * Generate id
 * @param   {HTMLElement} el
 * @returns {String}
 * @private
 */

/**
 * Get CSS computed property of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Eement} element
 * @argument {String} property
 */

/**
 * Get bounding client rect of given element
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} element
 * @return {Object} client rect
 */

/**
 * Get offsets to the popper
 * @method
 * @memberof Popper.Utils
 * @param {Object} position - CSS position the Popper will get applied
 * @param {HTMLElement} popper - the popper element
 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
 * @param {String} placement - one of the valid placement options
 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
 */

/**
 * Get offsets to the reference element
 * @method
 * @memberof Popper.Utils
 * @param {Object} state
 * @param {Element} popper - the popper element
 * @param {Element} reference - the reference element (the popper will be relative to this)
 * @param {Element} fixedPosition - is in fixed position mode
 * @returns {Object} An object containing the offsets which will be applied to the popper
 */

/**
 * Get outerHTML of elements, taking care
 * of SVG elements in IE as well.
 */

/**
 * Get the Sortable instance of an element
 * @param  {HTMLElement} element The element
 * @return {Sortable|undefined}         The instance of Sortable
 */

/**
 * Get the default value of a prop.
 */

/**
 * Get the first item that pass the test
 * by second argument function
 *
 * @param {Array} list
 * @param {Function} f
 * @return {*}
 */

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */

/**
 * Get the opposite placement of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement
 * @returns {String} flipped placement
 */

/**
 * Get the opposite placement variation of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement variation
 * @returns {String} flipped placement variation
 */

/**
 * Get the outer sizes of the given element (offset size + margins)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Object} object containing width and height properties
 */

/**
 * Get the prefixed supported property name
 * @method
 * @memberof Popper.Utils
 * @argument {String} property (camelCase)
 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
 */

/**
 * Get the raw type string of a value, e.g., [object Object].
 */

/**
 * Get the window associated with the element
 * @argument {Element} element
 * @returns {Window}
 */

/**
 * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)
 * and non-draggable elements
 * @param  {HTMLElement} el       The parent element
 * @param  {Number} childNum      The index of the child
 * @param  {Object} options       Parent Sortable's options
 * @return {HTMLElement}          The child at index childNum, or null if not found
 */

/**
 * Gets the direction dragEl must be swapped relative to target in order to make it
 * seem that dragEl has been "inserted" into that element's position
 * @param  {HTMLElement} target       The target whose position dragEl is being inserted at
 * @return {Number}                   Direction dragEl must be swapped
 */

/**
 * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)
 * @param  {HTMLElement} el       Parent element
 * @param  {selector} selector    Any other elements that should be ignored
 * @return {HTMLElement}          The last child, ignoring ghostEl
 */

/**
 * Gets the scroll value of the given element in the given side (top and left)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {String} side `top` or `left`
 * @returns {number} amount of scrolled pixels
 */

/**
 * Given an initial placement, returns all the subsequent placements
 * clockwise (or counter-clockwise).
 *
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement - A valid placement (it accepts variations)
 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
 * @returns {Array} placements including their variations
 */

/**
 * Given element offsets, generate an output similar to getBoundingClientRect
 * @method
 * @memberof Popper.Utils
 * @argument {Object} offsets
 * @returns {Object} ClientRect like output
 */

/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */

/**
 * Helper that recursively merges two data objects together.
 */

/**
 * Helper used to know if the given modifier depends from another one.<br />
 * It checks if the needed modifier is listed and enabled.
 * @method
 * @memberof Popper.Utils
 * @param {Array} modifiers - list of modifiers
 * @param {String} requestingName - name of requesting modifier
 * @param {String} requestedName - name of requested modifier
 * @returns {Boolean}
 */

/**
 * Helper used to know if the given modifier is enabled.
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean}
 */

/**
 * Hooks and props are merged as arrays.
 */

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */

/**
 * Insert multi-drag clones
 * @param  {[Boolean]} elementsInserted  Whether the multi-drag elements are inserted
 * @param  {HTMLElement} rootEl
 */

/**
 * Intercept mutating methods and emit events
 */

/**
 * It will add resize/scroll events and start recalculating
 * position of the popper element when they are triggered.
 * @method
 * @memberof Popper
 */

/**
 * It will remove resize/scroll events and won't recalculate popper position
 * when they are triggered. It also won't trigger `onUpdate` callback anymore,
 * unless you call `update` method manually.
 * @method
 * @memberof Popper
 */

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */

/**
 * List of accepted placements to use as values of the `placement` option.<br />
 * Valid placements are:
 * - `auto`
 * - `top`
 * - `right`
 * - `bottom`
 * - `left`
 *
 * Each placement can have a variation from this list:
 * - `-start`
 * - `-end`
 *
 * Variations are interpreted easily if you think of them as the left to right
 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
 * is right.<br />
 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
 *
 * Some valid examples are:
 * - `top-end` (on top of reference, right aligned)
 * - `right-start` (on right of reference, top aligned)
 * - `bottom` (on bottom, centered)
 * - `auto-end` (on the side with more space available, alignment depends by placement)
 *
 * @static
 * @type {Array}
 * @enum {String}
 * @readonly
 * @method placements
 * @memberof Popper
 */

/**
 * Loop trough the list of modifiers and run them in order,
 * each of them will then edit the data object.
 * @method
 * @memberof Popper.Utils
 * @param {dataObject} data
 * @param {Array} modifiers
 * @param {String} ends - Optional modifier name used as stopper
 * @returns {dataObject}
 */

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */

/**
 * Merge an Array of Objects into a single Object.
 */

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */

/**
 * Mimics the `find` method of Array
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */

/**
 * Mix properties into target object.
 */

/**
 * Modifier function, each modifier can have a function of this type assigned
 * to its `fn` property.<br />
 * These functions will be called on each update, this means that you must
 * make sure they are performant enough to avoid performance bottlenecks.
 *
 * @function ModifierFn
 * @argument {dataObject} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {dataObject} The data object, properly modified
 */

/**
 * Modifiers are plugins used to alter the behavior of your poppers.<br />
 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
 * needed by the library.
 *
 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
 * All the other properties are configurations that could be tweaked.
 * @namespace modifiers
 */

/**
 * Mount a plugin to Sortable
 * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted
 */

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */

/**
 * Normalize all injections into Object-based format
 */

/**
 * Normalize raw function directives into object format.
 */

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */

/**
 * Normalize the map
 * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]
 * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]
 * @param {Array|Object} map
 * @return {Object}
 */

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/**
 * Observe a list of Array items.
 */

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */

/**
 * Options with restrictions
 */

/**
 * Other object hashes.
 */

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */

/**
 * Parse a v-model expression into a base path and a final key segment.
 * Handles both dot-path and possible square brackets.
 *
 * Possible cases:
 *
 * - test
 * - test[key]
 * - test[test1[key]]
 * - test["a"][key]
 * - xxx.test[a[a].test1[key]]
 * - test.xxx.a["asa"][test1[key]]
 *
 */

/**
 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} offset
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @argument {String} basePlacement
 * @returns {Array} a two cells array with x and y offsets in numbers
 */

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */

/**
 * Parse simple path.
 */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */

/**
 * Query an element selector if it's not an element already.
 */

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */

/**
 * Reduce the code which written in Vue.js for committing the mutation
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} mutations # Object's item can be a function which accept `commit` function as the first param, it can accept anthor params. You can commit mutation and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */

/**
 * Reduce the code which written in Vue.js for getting the state.
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} states # Object's item can be a function which accept state and getters for param, you can do something for state and getters in it.
 * @param {Object}
 */

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */

/**
 * Remove an item from an array.
 */

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */

/**
 * Remove event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */

/**
 * Remove self from all dependencies' subscriber list.
 */

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */

/**
 * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.
 * @param {Function} fn
 * @return {Function}
 */

/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */

/**
 * Return the index of the matching object
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */

/**
 * Return the same value.
 */

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */

/**
 * Returns the "bounding client rect" of given element
 * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted
 * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container
 * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr
 * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone
 * @param  {[HTMLElement]} container              The parent the element will be placed in
 * @return {Object}                               The boundingClientRect of el, with specified adjustments
 */

/**
 * Returns the index of an element within its parent for a selected set of
 * elements
 * @param  {HTMLElement} el
 * @param  {selector} selector
 * @return {number}
 */

/**
 * Returns the index of the object within the given array
 * @param  {Array} arr   Array that may or may not hold the object
 * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find
 * @return {Number}      The index of the object in the array, or -1
 */

/**
 * Returns the offset parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} offset parent
 */

/**
 * Returns the parentNode or the host of the element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} parent
 */

/**
 * Returns the reference node of the reference object, or the reference object itself.
 * @method
 * @memberof Popper.Utils
 * @param {Element|Object} reference - the reference element (the popper will be relative to this)
 * @returns {Element} parent
 */

/**
 * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.
 * The value is returned in real pixels.
 * @param  {HTMLElement} el
 * @return {Array}             Offsets in the format of [left, top]
 */

/**
 * Returns the scrolling parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} scroll parent
 */

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */

/**
 * Runtime helper for rendering <slot>
 */

/**
 * Runtime helper for rendering static trees.
 */

/**
 * Runtime helper for rendering v-for lists.
 */

/**
 * Runtime helper for resolving filters
 */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */

/**
 * Search a special module from store by namespace. if module not exist, print error message.
 * @param {Object} store
 * @param {String} helper
 * @param {String} namespace
 * @return {Object}
 */

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */

/**
 * Set the attributes to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the attributes to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */

/**
 * Set the style to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the style to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */

/**
 * Set the x-placement attribute before everything else because it could be used
 * to add margins to the popper margins needs to be calculated to get the
 * correct popper offsets.
 * @method
 * @memberof Popper.modifiers
 * @param {HTMLElement} reference - The reference element used to position the popper
 * @param {HTMLElement} popper - The HTML element used as popper
 * @param {Object} options - Popper.js options
 */

/**
 * Setup needed event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */

/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

/**
 * Tells if a given input is a number
 * @method
 * @memberof Popper.Utils
 * @param {*} input to check
 * @return {Boolean}
 */

/**
 * The `dataObject` is an object containing all the information used by Popper.js.
 * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
 * @name dataObject
 * @property {Object} data.instance The Popper.js instance
 * @property {String} data.placement Placement applied to popper
 * @property {String} data.originalPlacement Placement originally defined on init
 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
 * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.boundaries Offsets of the popper boundaries
 * @property {Object} data.offsets The measurements of popper, reference and arrow elements
 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
 */

/**
 * The `referenceObject` is an object that provides an interface compatible with Popper.js
 * and lets you use it as replacement of a real DOM node.<br />
 * You can use this method to position a popper relatively to a set of coordinates
 * in case you don't have a DOM node to use as reference.
 *
 * ```
 * new Popper(referenceObject, popperNode);
 * ```
 *
 * NB: This feature isn't supported in Internet Explorer 10.
 * @name referenceObject
 * @property {Function} data.getBoundingClientRect
 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
 * @property {number} data.clientWidth
 * An ES6 getter that will return the width of the virtual reference element.
 * @property {number} data.clientHeight
 * An ES6 getter that will return the height of the virtual reference element.
 */

/**
 * Throws a `Cancel` if cancellation has been requested.
 */

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */

/**
 * Updates the position of the popper, computing the new offsets and applying
 * the new style.<br />
 * Prefer `scheduleUpdate` over `update` because of performance reasons.
 * @method
 * @memberof Popper
 */

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */

/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

/**
 * Validate component names
 */

/**
 * Validate whether given map is valid or not
 * @param {*} map
 * @return {Boolean}
 */

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */

/**
 * We'll load jQuery and the Bootstrap jQuery plugin which provides support
 * for JavaScript based Bootstrap features such as modals and tabs. This
 * code may be modified to fit the specific needs of your application.
 */

/**
 * We'll load the axios HTTP library which allows us to easily issue requests
 * to our Laravel back-end. This library automatically handles sending the
 * CSRF token as a header based on the value of the "XSRF" token cookie.
 */

/**
 * forEach for object
 */

/**
 * make localized dispatch, commit, getters and state
 * if there is no namespace, just use root ones
 */

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */

/**
* Create a debounced version of a method, that's asynchronously deferred
* but called in the minimum time possible.
*
* @method
* @memberof Popper.Utils
* @argument {Function} fn
* @returns {Function}
*/

/** @const */

/** @lends Sortable.prototype */

/** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */

/** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */

/** @prop {Function} */

/** @prop {ModifierFn} */

/** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */

/** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */

/** @prop {number} order=100 - Index used to define the order of execution */

/** @prop {number} order=200 - Index used to define the order of execution */

/** @prop {number} order=300 - Index used to define the order of execution */

/** @prop {number} order=400 - Index used to define the order of execution */

/** @prop {number} order=500 - Index used to define the order of execution */

/** @prop {number} order=600 - Index used to define the order of execution */

/** @prop {number} order=700 - Index used to define the order of execution */

/** @prop {number} order=800 - Index used to define the order of execution */

/** @prop {number} order=850 - Index used to define the order of execution */

/** @prop {number} order=900 - Index used to define the order of execution */

/** @type {!Array} */

/** @type {!Object} */

/** @type {string} */

/** Built-in constructor references. */

/** Event */

/** Event|TouchEvent */

/** HTMLElement */

/** Touch */

/** TouchEvent|PointerEvent **/

/** Used as a safe reference for `undefined` in pre-ES5 environments. */

/** Used as the semantic version number. */

/** Used for built-in method references. */

/** Used to identify `toStringTag` values supported by `_.clone`. */

/** Used to map Latin Unicode letters to basic Latin letters. */

/** Used to map characters to HTML entities. */

/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.1
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**!
 * Sortable 1.10.2
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */

/*******************************
ゲッター
********************************/

/*******************************
ステート
********************************/

/***********************************
ゲッター（アロー関数で短縮形で記述）
************************************/

/*************************************
  カードのデータを取得する
  *************************************/

/*************************************
  カードの作成・更新・削除・並び替え
  *************************************/

/*************************************
  タスクの作成・更新・削除・並び替え
  *************************************/

/*************************************
  フォルダー作成・更新・削除・並び替え
  *************************************/

/****************************************
     * focus処理のメソッド
     *****************************************/

/****************************************
  お問い合わせメール送信
  *****************************************/

/****************************************
  エラーメッセージ関係
  *****************************************/

/****************************************
  パスワードリセット
  *****************************************/

/****************************************
  パスワードリマインダー
  *****************************************/

/****************************************
  プロフィール編集
  *****************************************/

/****************************************
  メール送信メッセージ
  *****************************************/

/****************************************
  リロード時にログインチェック
  *****************************************/

/****************************************
  ログアウト
  *****************************************/

/****************************************
  ログイン
  *****************************************/

/****************************************
  会員登録
  *****************************************/

/*************************************************
     * タスク追加用フォームの表示
     **************************************************/

/*************************************************
     * データ更新時のモーダルを表示
     **************************************************/

/*************************************************
     * バリデーションメッセージを消すアクションを呼ぶ
     **************************************************/

/*************************************************
     * プロフィールアクセス時にユーザー情報を取得
     **************************************************/

/************************************************************************/

/******/

/***/

/**Event*/

/**HTMLElement*/

/**String*/

/**TouchEvent*/

/**boolean*/

/*------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/

/*@__PURE__*/

/*eslint func-names:0*/

/*eslint no-param-reassign:0*/

/*global toString:true*/

/*jshint -W056 */

//

//     // authモジュールのapiStatusを参照

//     // console.log(evt.item)

//     // console.log(evt.item.getAttribute('data-task-id'))

//     console.log(evt.item)

//     evt.item.setAttribute('class', 'c-task__todo--list u-animetion')

//     evt.item.setAttribute('class', 'c-task__todo--list')

//     let targetTask = evt.item.getAttribute('data-task-id')

//     return this.$store.state.auth.apiStatus

//    - Any

//    - If key is not up or down => not a dropdown command

//    - If trigger inside the menu => not a dropdown command

//    - Node.DOCUMENT_NODE

//    - Node.ELEMENT_NODE

//    created before the child)

//    documentElement of the parent window

//    its watchers can be skipped.

//    return this.$store.getters['auth/check']

//    user watchers are created before the render watcher)

//   .css('--customProperty) (#3144)

//   .css('filter') (IE 9 only, #12537)

//   1. An object of properties

//   1. No key was specified

//   1. The entire cache object

//   2. A key and value

//   2. A string key was specified, but no value provided

//   2. The data stored at the key

//   apiStatus(){

//   but not by others (comment: 8; processing instruction: 7; etc.)

//   captures = result.slice(1).map(maybeToString)

//   https://html.spec.whatwg.org/multipage/forms.html#category-listed

//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled

//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled

//   isLogin(){

//   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set

//   },

//  - And not a key in REGEXP_KEYDOWN => not a dropdown command

//  - If key is other than escape

//  - If space key => not a dropdown command

//  - Node

//  - Object

//  nested

// "

// "$stable" marker.

// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]

// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]

// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]

// "Attribute values must be CSS identifiers [capture 5]

// "Whether an element is represented by a :lang() selector

// "consumed" by the delegate iterator. If context.method was

// "force" the microtask queue to be flushed by adding an empty timer.

// "px" to a few hardcoded values.

// "return" to "throw", let that override the TypeError below.

// "return", allow the original .return call to continue in the

// "too much recursion" error.

// "touch" every property so they are all tracked as

// "~~" acts like a faster Math.floor() here

// #1143: IFrame support workaround

// #1184 fix - Prevent click event on fallback if dragged but item not changed position

// #1276 fix:

// #1450: sometimes IE returns 1223 when it should be 204

// #14683: Only rethrow if this hasn't been notified as an error yet

// #2301

// #3663: IE encodes newlines inside attribute values while other browsers don't

// #3895, #4268

// #4391: in IE9, setting type can reset value for input[type=radio]

// #6157

// #6513

// #6574 in case the inject object is observed...

// #6601 work around Chrome version <= 55 bug where single textNode

// #6666: IE/Edge forces progress value down to 1 before setting a max

// #6828: chrome encodes content in a[href]

// #6887 firefox doesn't update muted state if set via attribute

// #6903

// #7138: IE10 & 11 fires input event when setting placeholder on

// #7573 disable dep collection when invoking data getters

// #7573 disable dep collection when invoking lifecycle hooks

// #7806: IE11 uses key names without `Arrow` prefix for arrow keys.

// #7817 clone node before setting fnContext, otherwise if the node is reused

// #7880: IE11 and Edge use `Esc` for Escape key name.

// #7975

// #9112: IE11 uses `Del` for Delete key name.

// #9112: IE11 uses `Spacebar` for Space key name.

// #9438, #9506

// #9441: can't use 'keyCode' in $event because Chrome autofill fires fake

// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp

// #9448 bail if event is fired in another document in a multi-page

// #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState

// #9534: if a component with scoped slots is inside a conditional branch,

// #9681 QtWebEngine event.timeStamp is negative value

// #9682: remove data so that it's not used in an eventual retry

// #match works fine because it just return the exec results, even if it has

// #replace needs built-in support for named groups.

// $attrs & $listeners are exposed for easier HOC creation.

// $flow-disable-line

// $request->card_id でキーを指定するとLaravel側でタスクIDの7が取得できる

// '

// (

// ( event )  dispatched jQuery.Event

// ( namespace ) or ( selector, types [, fn] )

// ( types [, fn] )

// ( types, data, fn )

// ( types, fn )

// ( types, selector, fn )

// ( types-Object, data )

// ( types-Object, selector, data )

// ( types-object [, selector] )

// (#6466 MutationObserver is unreliable in IE11)

// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)

// () => Promise

// (also registers _wrappedGetters as computed properties)

// (and therefore has an element appears at this[ 0 ]) and the

// (as if it's the second time we tap on it, mouseenter compat event

// (async resolves are shimmed as synchronous during SSR)

// (avoids potential for endless recursion during removal of special event handlers)

// (e.g. #6813, out-in transitions).

// (e.g. it was from a cached normal slot) the fnContext causes named slots

// (excepting DocumentFragment context, where the methods don't exist)

// (excepting IE8 booleans)

// (focus and blur are always synchronous in other supported browsers,

// (focus or blur), assume that the surrogate already propagated from triggering the

// (http://ejohn.org/blog/javascript-micro-templating/)

// (i.e., `typeof document.createElement( "object" ) === "function"`).

// (it can always be set on a per-request basis or even using ajaxSetup)

// (left, top)

// (no matter how long the jqXHR object will be used)

// (relative to UNIX epoch), so in order to compare time we have to use the

// (returning the new matched element set)

// (such as Node.js), expose a factory as module.exports.

// (the latter of which guarantees us context)

// (via `this.document`) & document (via `this`).

// (we check in cache first)

// )

// * false: [ value ].slice( 0 ) => resolve( value )

// * listed form-associated elements in a disabled fieldset

// * option elements in a disabled optgroup

// * true: [ value ].slice( 1 ) => resolve()

// *native* events that it fires directly, ensuring that state changes have

// - appending to trailing slash (last segment is empty)

// - not appending

// ----------------------------------------------------------------------

// ... .then handlers, argument index, [final state]

// ...and capture the result

// ...and disregard older resolution values

// ...but misinterprets leading-number strings, particularly hex literals ("0x...")

// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)

// ...in a gzip-friendly way

// ...intermediate processing is necessary

// ...otherwise use results directly

// .constructor.prototype properties for functions that return Generator

// .get() because push.apply(_, arraylike) throws on ancient WebKit

// .offsetParent will return the closest TH, TD or TABLE in case

// .throw, and .return (see defineIteratorMethods).

// .throw, and .return methods.

// /

// 0 -> Array#forEach

// 0: no normalization needed

// 1 -> Array#map

// 1) For the element inside the iframe without offsetParent, this method will return

// 1. Components are updated from parent to child. (because parent is always

// 1. Copy private data: events, handlers, etc.

// 1. When the children contains components - because a functional component

// 1. components not able to mutate slot nodes

// 1. resolve relative redirect

// 18.2.4 parseFloat(string)

// 18.2.5 parseInt(string, radix)

// 19.1.2.1 Object.assign(target, source, ...)

// 19.1.2.11 Object.isExtensible(O)

// 19.1.2.12 Object.isFrozen(O)

// 19.1.2.13 Object.isSealed(O)

// 19.1.2.14 / 15.2.3.14 Object.keys(O)

// 19.1.2.14 Object.keys(O)

// 19.1.2.15 Object.preventExtensions(O)

// 19.1.2.17 Object.seal(O)

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])

// 19.1.2.2 Object.create(O [, Properties])

// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)

// 19.1.2.3 Object.defineProperties(O, Properties)

// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)

// 19.1.2.4 Object.defineProperty(O, P, Attributes)

// 19.1.2.5 Object.freeze(O)

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

// 19.1.2.7 Object.getOwnPropertyNames(O)

// 19.1.2.8 Object.getOwnPropertySymbols(O)

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)

// 19.1.2.9 Object.getPrototypeOf(O)

// 19.1.3.1 Object.assign(target, source)

// 19.1.3.10 Object.is(value1, value2)

// 19.1.3.19 Object.setPrototypeOf(O, proto)

// 19.1.3.6 Object.prototype.toString()

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)

// 19.2.3.6 Function.prototype[@@hasInstance](V)

// 19.2.4.2 name

// 19.4.1.1 Symbol([description])

// 19.4.2.1 Symbol.for(key)

// 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14

// 19.4.2.5 Symbol.keyFor(sym)

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)

// 19.4.3.5 Symbol.prototype[@@toStringTag]

// 1: simple normalization needed (possible 1-level deep nested array)

// 2 -> Array#filter

// 2) For the hidden or detached element

// 2. A component's user watchers are run before its render watcher (because

// 2. Copy user data

// 2. When the children contains constructs that always generated nested Arrays,

// 2. add radio else-if condition

// 2. resolve params

// 2. static slot content fails for hot-reloading

// 2.2 with runInNewContext: true

// 2.3 injection

// 2.6 explicit observable API

// 2.6 v-slot syntax

// 20.1.2.1 Number.EPSILON

// 20.1.2.10 Number.MIN_SAFE_INTEGER

// 20.1.2.12 Number.parseFloat(string)

// 20.1.2.13 Number.parseInt(string, radix)

// 20.1.2.2 Number.isFinite(number)

// 20.1.2.3 Number.isInteger(number)

// 20.1.2.4 Number.isNaN(number)

// 20.1.2.5 Number.isSafeInteger(number)

// 20.1.2.6 Number.MAX_SAFE_INTEGER

// 20.2.1.9 Math[@@toStringTag]

// 20.2.2.11 Math.clz32(x)

// 20.2.2.12 Math.cosh(x)

// 20.2.2.14 Math.expm1(x)

// 20.2.2.16 Math.fround(x)

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])

// 20.2.2.18 Math.imul(x, y)

// 20.2.2.20 Math.log1p(x)

// 20.2.2.21 Math.log10(x)

// 20.2.2.22 Math.log2(x)

// 20.2.2.28 Math.sign(x)

// 20.2.2.3 Math.acosh(x)

// 20.2.2.30 Math.sinh(x)

// 20.2.2.33 Math.tanh(x)

// 20.2.2.34 Math.trunc(x)

// 20.2.2.5 Math.asinh(x)

// 20.2.2.7 Math.atanh(x)

// 20.2.2.9 Math.cbrt(x)

// 20.3.3.1 / 15.9.4.4 Date.now()

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()

// 21.1.2.2 String.fromCodePoint(...codePoints)

// 21.1.2.4 String.raw(callSite, ...substitutions)

// 21.1.3.13 String.prototype.repeat(count)

// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

// 21.1.3.25 String.prototype.trim()

// 21.1.3.27 String.prototype[@@iterator]()

// 21.1.3.3 String.prototype.codePointAt(pos)

// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

// 21.1.3.7 String.prototype.includes(searchString, position = 0)

// 21.2.5.14 RegExp.prototype.toString()

// 21.2.5.3 get RegExp.prototype.flags

// 21.2.5.3 get RegExp.prototype.flags()

// 21.2.5.6 RegExp.prototype[@@match](string)

// 21.2.5.9 RegExp.prototype[@@search](string)

// 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)

// 22.1.2.3 Array.of( ...items)

// 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])

// 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])

// 22.1.3.13 Array.prototype.join(separator)

// 22.1.3.13 Array.prototype.keys()

// 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])

// 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])

// 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])

// 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])

// 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])

// 22.1.3.25 Array.prototype.sort(comparefn)

// 22.1.3.29 Array.prototype.values()

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

// 22.1.3.30 Array.prototype[@@iterator]()

// 22.1.3.31 Array.prototype[@@unscopables]

// 22.1.3.4 Array.prototype.entries()

// 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

// 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

// 23.1 Map Objects

// 23.1.3.1 Map.prototype.clear()

// 23.1.3.3 Map.prototype.delete(key)

// 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11

// 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)

// 23.1.3.6 Map.prototype.get(key)

// 23.1.3.7 Map.prototype.has(key)

// 23.1.3.9 Map.prototype.set(key, value)

// 23.2 Set Objects

// 23.2.3.1 Set.prototype.add(value)

// 23.2.3.2 Set.prototype.clear()

// 23.2.3.4 Set.prototype.delete(value)

// 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)

// 23.2.3.7 Set.prototype.has(value)

// 23.3.3.2 WeakMap.prototype.delete(key)

// 23.3.3.3 WeakMap.prototype.get(key)

// 23.3.3.4 WeakMap.prototype.has(key)

// 23.3.3.5 WeakMap.prototype.set(key, value)

// 23.4 WeakSet Objects

// 23.4.3.1 WeakSet.prototype.add(value)

// 23.4.3.3 WeakSet.prototype.delete(value)

// 23.4.3.4 WeakSet.prototype.has(value)

// 24.1.3.1 ArrayBuffer.isView(arg)

// 24.1.4.3 ArrayBuffer.prototype.slice(start, end)

// 24.3.2 JSON.stringify(value [, replacer [, space]])

// 24.3.3 JSON[@@toStringTag]

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

// 25.4.1.5 NewPromiseCapability(C)

// 25.4.3.1 Promise(executor)

// 25.4.4.1 Promise.all(iterable)

// 25.4.4.4 Promise.race(iterable)

// 25.4.4.5 Promise.reject(r)

// 25.4.4.6 Promise.resolve(x)

// 25.4.5.1 Promise.prototype.catch(onRejected)

// 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)

// 26.1.10 Reflect.isExtensible(target)

// 26.1.11 Reflect.ownKeys(target)

// 26.1.12 Reflect.preventExtensions(target)

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])

// 26.1.14 Reflect.setPrototypeOf(target, proto)

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)

// 26.1.4 Reflect.deleteProperty(target, propertyKey)

// 26.1.5 Reflect.enumerate(target)

// 26.1.6 Reflect.get(target, propertyKey [, receiver])

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)

// 26.1.8 Reflect.getPrototypeOf(target)

// 26.1.9 Reflect.has(target, propertyKey)

// 2: full normalization needed

// 3 -> Array#some

// 3) For body or html element, i.e. in case of the html node - it will return itself

// 3. If a component is destroyed during a parent component's watcher run,

// 3. other

// 3. rematch with existing query and hash

// 4 -> Array#every

// 422ステータスの処理

// 5 -> Array#find

// 6 -> Array#findIndex

// 7.1.1 ToPrimitive(input [, PreferredType])

// 7.1.13 ToObject(argument)

// 7.1.15 ToLength

// 7.1.4 ToInteger

// 7.2.1 RequireObjectCoercible(argument)

// 7.2.2 IsArray(argument)

// 7.2.8 IsRegExp(argument)

// 7.2.9 SameValue(x, y)

// 7.3.20 SpeciesConstructor(O, defaultConstructor)

// 7.4.6 IteratorClose(iterator, completion)

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)

// :(first|last|only)-(child|of-type)

// :class are used on slot nodes

// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),

// < in plain text, be forgiving and treat it as text

// <- awaiting reactions

// <- checked in isUnhandled reactions

// <- done

// <- index

// <- key

// <- next entry

// <- previous entry

// <- rejection state, 0 - default, 1 - handled, 2 - unhandled

// <- state

// <- value

// <object> elements with no `data` attribute has an object

// <textarea>... block the first input event and remove the blocker

// @@iterator function is called on it. Some browsers' implementations of the

// @@match logic

// @@replace logic

// @@search logic

// @@split logic

// A .throw or .return when the delegate iterator has no .throw

// A Generator should always return itself as the iterator object when the

// A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).

// A central reference to the root jQuery(document)

// A counter to track how many items to wait for before

// A cross-domain request is in order when the origin doesn't match the current origin.

// A fallback to window.onload, that will always work

// A global GUID counter for objects

// A major drawback of this tradeoff is that there are some scenarios

// A match means we're done; a fail means we have to keep checking

// A simple way to check for HTML strings

// A special extend for ajax options

// A tribute to the "awesome hack by Dean Edwards"

// AFTER it was attached.

// Abort any current/pending executions

// Abort any pending executions

// Abort handling of the native event

// Abort if not done already and return

// Abort if there are pending holds or we're already ready

// Aborting is no longer a cancellation

// Accept quoted arguments as-is

// Accepts only:

// Accessing document.activeElement can throw unexpectedly

// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)

// Accessing the selectedIndex property

// Accessing this property makes selected-by-default

// Account for positive content-box scroll gutter when requested by providing computedVal

// Account for the *real* offset parent, which can be the document or its root element

// Account for unreliable border-box dimensions by comparing offset* to computed and

// ActiveX objects in IE.

// Actual Callbacks object

// Actual callback list

// Add `Array` methods to `lodash.prototype`.

// Add `LazyWrapper` methods for `_.drop` and `_.take` variants.

// Add `LazyWrapper` methods for `_.head` and `_.last`.

// Add `LazyWrapper` methods for `_.initial` and `_.tail`.

// Add `LazyWrapper` methods that accept an `iteratee` value.

// Add `LazyWrapper` methods to `lodash.prototype`.

// Add a callback or a collection of callbacks to the list

// Add a port to the getters proxy.

// Add a progress sentinel to prevent the fx queue from being

// Add aliases.

// Add animation state manager

// Add button/input type pseudos

// Add chain sequence methods to the `lodash` wrapper.

// Add default options from plugin

// Add elements passing elementMatchers directly to results

// Add elements to results, through postFinder if defined

// Add event

// Add headers to the request

// Add in properties whose names you wish to fix before

// Add in style property hooks for overriding the default

// Add lazy aliases.

// Add list-specific methods

// Add matches to results

// Add methods that return unwrapped values in chain sequences.

// Add methods that return wrapped values in chain sequences.

// Add methods to `Hash`.

// Add methods to `LazyWrapper`.

// Add methods to `ListCache`.

// Add methods to `MapCache`.

// Add methods to `SetCache`.

// Add methods to `Stack`.

// Add methods to `lodash.prototype`.

// Add nodes directly

// Add or update anti-cache param if needed

// Add padding

// Add paddings

// Add position, width and height to our offsets object

// Add properties assigned by `RegExp#exec`.

// Add properties to offsets to make them a complete clientRect object

// Add protocol if not provided (prefilters might expect it)

// Add responseType to request if needed

// Add the old object onto the stack (as a reference)

// Add the remaining (directly-bound) handlers

// Add the top/left cssHooks using jQuery.fn.position

// Add to the element's handler list, delegates in front

// Add which for click: 1 === left; 2 === middle; 3 === right

// Add which for key events

// Add withCredentials to request if needed

// Add xsrf header

// Adding a temporary attribute to the document before the selection works

// Adjust body padding

// Adjust fixed content padding

// Adjust for scale()

// Adjust for the element's box model

// Adjust for translate()

// Adjust sticky content margin

// Adjustment may not be necessary

// Ajaxリクエストであることを示すヘッダーを付与する

// Alias method option to type as per ticket #12004

// All IE versions use low-res event timestamps, and have problematic clock

// All done!

// All others

// All such elements have a "form" property.

// Allow custom headers/mimetypes and early abort

// Allow for axios('example/url'[, config]) a la fetch API

// Allow instantiation without the 'new' keyword

// Allow onerror to be called first,

// Allow special events to draw outside the lines

// Allow use of default import syntax in TypeScript

// Also disable .add unless we have memory (since it would have no effect)

// Also prevent it if we're currently inside a leveraged native-event stack

// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)

// Also, save errorCallback to a variable

// Also, using (macro) tasks in event handler would cause some weird behaviors

// Always assume duplicates if they aren't passed to the comparison function

// Always return an empty object.

// Always skip document fragments

// Always use camelCase key (gh-2257)

// An `NaN` primitive is the only value that is not equal to itself.

// An input loses its value after becoming a radio

// Anchor tag for parsing the document origin

// Anchor's host property isn't correctly set when s.url is relative

// Android Browser returns percentage for some values,

// Animate inline elements as inline-block

// Animation

// Animations created synchronously will run synchronously

// Any relative (+/-) values have already been

// Append to fragment

// Apply `position` to popper before anything else because

// Apply converter (if not an equivalence)

// Apply custom fields if provided

// Apply effect

// Apply extends and mixins on the child options,

// Apply postFilter

// Apply prefilters

// Apply relative offset (+=/-=) if specified

// Apply set filters to unmatched elements

// Apply the dataFilter if provided

// Argument "data" should be string of html

// Array#includes uses SameValueZero equality algorithm

// Array#indexOf ignores holes, Array#includes - not

// Arraylike of elements (jQuery, arguments, Array)

// As in, an element does not contain itself

// As of jQuery 3.0, isNumeric is limited to

// As well, disconnected nodes are said to be in a document

// Assign default placeholders.

// Assign the result of the finished delegate to the temporary

// Assign to newCache so results back-propagate to previous elements

// Assign undefined instead of using delete, see Data#remove

// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes

// Assume cyclic values are equal.

// Assume jQuery is ready without the ready module

// Assume position:fixed implies availability of getBoundingClientRect

// Assume that strings that start and end with <> are HTML and skip the regex check

// Assumes a single number if not a string

// Assuming integer scroll gutter, subtract the rest and round down

// Async edge case #6566 requires saving the timestamp when event listeners are

// Async edge case fix requires storing an event listener's attach timestamp.

// AsyncIterator objects; they just return a Promise for the value of

// Attach a single capturing handler on the document while someone wants focusin/focusout

// Attach callbacks from options

// Attach deferreds

// Attach marginTop and marginLeft because in some circumstances we may need them

// Attempt to "discover" the data in

// Attempt to get data from the cache

// Attribute hooks are determined by the lowercase version

// Attribute names can contain non-HTML whitespace characters

// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors

// Attributes

// Auto install if it is not done yet and `window` has `Vue`.

// Avoid an infinite loop

// Avoid an infinite loop by temporarily removing this function from the getter

// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression

// Avoid hanging onto element (issue #299)

// Avoid lazy use if the iteratee has a "length" value other than `1`.

// Avoid propagating failures to Promises returned by later

// Avoid unnecessary DOM access if visibility hasn't changed

// Avoiding first `popstate` event dispatched in some browsers but first

// Axios

// B.2.3.10 String.prototype.link(url)

// B.2.3.11 String.prototype.small()

// B.2.3.12 String.prototype.strike()

// B.2.3.13 String.prototype.sub()

// B.2.3.14 String.prototype.sup()

// B.2.3.2 String.prototype.anchor(name)

// B.2.3.3 String.prototype.big()

// B.2.3.4 String.prototype.blink()

// B.2.3.5 String.prototype.bold()

// B.2.3.6 String.prototype.fixed()

// B.2.3.7 String.prototype.fontcolor(color)

// B.2.3.8 String.prototype.fontsize(size)

// B.2.3.9 String.prototype.italics()

// BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!

// Back compat <1.8 extension point

// Bail out if this is a no-op like .hide().hide()

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport

// Base data struct for store's module, package with some attribute and method

// Base inspection function for prefilters and transports

// Based off of the plugin by Clint Helfers, with permission.

// Based on John Resig's `tmpl` implementation

// Be aware, modifiers could override the properties defined in the previous

// Be forgiving, per 25.3.3.3.3 of the spec:

// Because of that, this security measure has to be disabled in Safari 8.

// Behaves like an Array's method, not like a jQuery method.

// Behavior in IE 9 is more subtle than in newer versions & it passes

// Bind a function to a context, optionally partially applying any

// Bind all private methods

// Bind events

// Bind script tag hack transport

// Bind the events: dragstart/dragend

// Black-hole SVG <use> instance trees (trac-13180)

// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347

// Boolean attributes and "value" are not treated correctly

// Boolean properties

// Both box models exclude margin

// Both nodes are inside #document

// Browser environment sniffing

// Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)

// Bug if using scale(): https://stackoverflow.com/questions/2637058

// Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521

// Build QSA regex

// Build a new jQuery matched element set

// Building a settings object

// Builds headers hashtable if needed

// Bulk operations run against the entire set

// But maintain support for old signatures

// But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.

// By default it does NOT remove it from the map (attrsMap) because the map is

// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js

// CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/entry-lib.js

// CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/App.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Include/Footer.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Include/Header.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Include/Message.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Include/TaskCardAdd.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Include/TaskFolderAdd.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Include/TaskFolderProfile.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Include/TaskListAdd.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Index.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Loading/Loading.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Policy.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Profile.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Rule.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/TaskApp.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/TaskCard.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/TaskFolder.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/TaskList.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/TwitterAuth/Callback.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/common/CommonLogo.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/common/NoImage.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/modal/ChangePassword.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/page/Contact.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/page/EmailChangeCallback.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/page/Login.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/page/PasswordReminder.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/page/PasswordReset.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/page/Register.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/page/error/SystemError.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Include/Footer.vue?vue&type=template&id=238a3b2d&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Include/Message.vue?vue&type=template&id=4a4f6436&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Include/TaskCardAdd.vue?vue&type=template&id=476042ec&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Include/TaskFolderAdd.vue?vue&type=template&id=69345b2c&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Include/TaskListAdd.vue?vue&type=template&id=66062588&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Index.vue?vue&type=template&id=bb962f12&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Loading/Loading.vue?vue&type=template&id=0bb449a4&scoped=true&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Policy.vue?vue&type=template&id=4d092b46&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Profile.vue?vue&type=template&id=3bd692e4&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/Rule.vue?vue&type=template&id=5dbda032&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/TaskApp.vue?vue&type=template&id=18b3bdc1&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/TaskCard.vue?vue&type=template&id=8b6a65c0&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/TaskFolder.vue?vue&type=template&id=39a1917e&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/TaskList.vue?vue&type=template&id=0afd8bae&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/TwitterAuth/Callback.vue?vue&type=template&id=09e669a4&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/common/CommonLogo.vue?vue&type=template&id=7fe0cd82&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/common/NoImage.vue?vue&type=template&id=662bd3e1&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/modal/ChangePassword.vue?vue&type=template&id=a1ea1710&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/page/Contact.vue?vue&type=template&id=22604c4b&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/page/EmailChangeCallback.vue?vue&type=template&id=13dd21fc&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/page/Login.vue?vue&type=template&id=8d9ed858&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/page/PasswordReminder.vue?vue&type=template&id=2606f812&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/page/PasswordReset.vue?vue&type=template&id=63030142&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/page/Register.vue?vue&type=template&id=7a540488&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./resources/js/components/page/error/SystemError.vue?vue&type=template&id=66407a06&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js

// CONCATENATED MODULE: ./node_modules/vue-router/dist/vue-router.esm.js

// CONCATENATED MODULE: ./resources/img/eyecatch-img.png

// CONCATENATED MODULE: ./resources/img/eyecatch-logo.png

// CONCATENATED MODULE: ./resources/img/header-logo.png

// CONCATENATED MODULE: ./resources/img/logo.png

// CONCATENATED MODULE: ./resources/img/no_img.png

// CONCATENATED MODULE: ./resources/js/App.vue

// CONCATENATED MODULE: ./resources/js/App.vue?vue&type=template&id=f348271a&

// CONCATENATED MODULE: ./resources/js/app.js

// CONCATENATED MODULE: ./resources/js/components/Include/Footer.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/Include/Footer.vue?vue&type=template&id=238a3b2d&

// CONCATENATED MODULE: ./resources/js/components/Include/Header.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/Include/Header.vue?vue&type=template&id=44bc9f1f&

// CONCATENATED MODULE: ./resources/js/components/Include/Message.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/Include/Message.vue?vue&type=template&id=4a4f6436&

// CONCATENATED MODULE: ./resources/js/components/Include/TaskCardAdd.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/Include/TaskCardAdd.vue?vue&type=template&id=476042ec&

// CONCATENATED MODULE: ./resources/js/components/Include/TaskFolderAdd.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/Include/TaskFolderAdd.vue?vue&type=template&id=69345b2c&

// CONCATENATED MODULE: ./resources/js/components/Include/TaskFolderProfile.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/Include/TaskFolderProfile.vue?vue&type=template&id=22a236b4&

// CONCATENATED MODULE: ./resources/js/components/Include/TaskListAdd.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/Include/TaskListAdd.vue?vue&type=template&id=66062588&

// CONCATENATED MODULE: ./resources/js/components/Index.vue?vue&type=template&id=bb962f12&

// CONCATENATED MODULE: ./resources/js/components/Loading/Loading.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/Loading/Loading.vue?vue&type=template&id=0bb449a4&scoped=true&

// CONCATENATED MODULE: ./resources/js/components/Policy.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/Policy.vue?vue&type=template&id=4d092b46&

// CONCATENATED MODULE: ./resources/js/components/Profile.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/Profile.vue?vue&type=template&id=3bd692e4&

// CONCATENATED MODULE: ./resources/js/components/Rule.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/Rule.vue?vue&type=template&id=5dbda032&

// CONCATENATED MODULE: ./resources/js/components/TaskApp.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/TaskApp.vue?vue&type=template&id=18b3bdc1&

// CONCATENATED MODULE: ./resources/js/components/TaskCard.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/TaskCard.vue?vue&type=template&id=8b6a65c0&

// CONCATENATED MODULE: ./resources/js/components/TaskFolder.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/TaskFolder.vue?vue&type=template&id=39a1917e&

// CONCATENATED MODULE: ./resources/js/components/TaskList.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/TaskList.vue?vue&type=template&id=0afd8bae&

// CONCATENATED MODULE: ./resources/js/components/TwitterAuth/Callback.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/TwitterAuth/Callback.vue?vue&type=template&id=09e669a4&

// CONCATENATED MODULE: ./resources/js/components/common/CommonLogo.vue?vue&type=template&id=7fe0cd82&

// CONCATENATED MODULE: ./resources/js/components/common/NoImage.vue?vue&type=template&id=662bd3e1&

// CONCATENATED MODULE: ./resources/js/components/modal/ChangePassword.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/modal/ChangePassword.vue?vue&type=template&id=a1ea1710&

// CONCATENATED MODULE: ./resources/js/components/page/Contact.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/page/Contact.vue?vue&type=template&id=22604c4b&

// CONCATENATED MODULE: ./resources/js/components/page/EmailChangeCallback.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/page/EmailChangeCallback.vue?vue&type=template&id=13dd21fc&

// CONCATENATED MODULE: ./resources/js/components/page/Login.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/page/Login.vue?vue&type=template&id=8d9ed858&

// CONCATENATED MODULE: ./resources/js/components/page/PasswordReminder.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/page/PasswordReminder.vue?vue&type=template&id=2606f812&

// CONCATENATED MODULE: ./resources/js/components/page/PasswordReset.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/page/PasswordReset.vue?vue&type=template&id=63030142&

// CONCATENATED MODULE: ./resources/js/components/page/Register.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/page/Register.vue?vue&type=template&id=7a540488&

// CONCATENATED MODULE: ./resources/js/components/page/error/SystemError.vue?vue&type=script&lang=js&

// CONCATENATED MODULE: ./resources/js/components/page/error/SystemError.vue?vue&type=template&id=66407a06&

// CONCATENATED MODULE: ./resources/js/router.js

// CONCATENATED MODULE: ./resources/js/statusCode.js

// CONCATENATED MODULE: ./resources/js/store/auth.js

// CONCATENATED MODULE: ./resources/js/store/contact.js

// CONCATENATED MODULE: ./resources/js/store/profile.js

// CONCATENATED MODULE: ./resources/js/store/store.js

// CONCATENATED MODULE: ./resources/js/store/taskStore.js

// CONCATENATED MODULE: ./src/vuedraggable.js

// CSP to forbid Function, and you're not willing to fix either of those

// CSS escapes

// CSS string/identifier serialization

// CSS transitions. Since the element may be inside an entering

// Cache response headers

// Cache the compiled function

// Cache the index of each encountered element

// Cache the tokens

// Caches the header

// Calculate position if both inputs belong to the same document

// Call a native DOM method on the target with the same name as the event.

// Call all callbacks with the given context and arguments

// Call all the callbacks with the given arguments

// Call an optional hook to record the stack, in case of exception

// Call delegate.iterator[context.method](context.arg) and handle the

// Call given func if any

// Call if it was a function and we have a response

// Call the postDispatch hook for the mapped type

// Call the preDispatch hook for the mapped type, and let it bail if desired

// Call when dragEl has been inserted

// Callback

// Callback can either be a function or a string

// Callback for when everything is done

// Callbacks context

// Caller can pass in a jQuery.Event object, Object, or just an event type string

// Caller can pass in an object of custom data in lieu of the handler

// Can add propHook for "elements" to filter or add form elements

// Can be adjusted by the user

// Can find the shadow root otherwise it'll return the document

// Can use an empty set, since event contains the info

// Can't trust NodeList.length

// Cancel the outer synthetic event

// Cancel the request

// Capture animation state

// Capture executables

// Capture rects,

// Capture the context ID, setting it first if necessary

// Cast descendant combinators to space

// Catch cases where $(document).ready() is called

// Certain elements can have dimension info if we invisibly show them

// Check against all ancestor/preceding elements

// Check against closest ancestor/preceding element

// Check attachment across shadow DOM boundaries when possible (gh-3504)

// Check each className given, space separated list

// Check filter

// Check for circular references and return its corresponding clone.

// Check for headers option

// Check for inherited disabledness on relevant non-disabled elements:

// Check for promise aspect first to privilege synchronous behavior

// Check for vendor prefixed names

// Check if a given callback is in the list.

// Check if a regular expression validates the attribute.

// Check if b follows a

// Check if getElementById returns elements by name

// Check if getElementsByTagName("*") returns only elements

// Check if it's jQuery element

// Check if module is in cache

// Check if target is beside dragEl in respective direction (ignoring hidden elements)

// Check if the owner object already has a cache

// Check if we're dealing with a known content-type

// Check if we're setting a value

// Check readyState before timeout as it changes

// Check state lost if the name is set (#11217)

// Check that cyclic values are equal.

// Check to see if it's possible to do matchesSelector

// Check to see if we have a response for the expected dataType

// Choose the first element that is related to our preferred document

// Chosen item

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec

// Claim the first handler

// Class

// Class selector

// Clean up any remaining tags

// Clean up if we're done firing for good

// Clean up request

// Clean up the event in case it is being reused

// Clean-up function (fires after converters)

// Cleanup code by stripping empty strings.

// Clear all callbacks and values

// Clear input after sorting to release objects

// Clear timeout if it exists

// Clear up the last queue stop function

// Clone any incoming data and prepend the event, creating the handler arg list

// Clones must be hidden before folding animation to capture dragRectAbsolute properly

// Clones must be shown (and check to remove multi drags) after folding when interfering multiDragElements are moved out

// Close all the open elements, up the stack

// Coalesce documents and windows

// Coerce booleans to `1` or `0` and dates to milliseconds.

// Coerce regexes to strings and treat strings, primitives and objects,

// Coerce string values

// Combinators

// Comma and first run

// Comment:

// Compensate for current animation

// Compile all the patterns before compilation.

// Compile all the tokens into regexps.

// Compile and execute a filtering function if one is not provided

// Complete

// Compose partial arguments.

// Compose partial right arguments.

// Compute the sideValue using the updated popper offsets

// Condense equivalence converters

// Console exists when dev tools are open, which can happen at any time

// Content is a DOM node or a jQuery

// Contents

// Context for global events is callbackContext if it is a DOM node or jQuery collection

// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:

// Convert "+=" or "-=" to relative numbers (#7345)

// Convert "normal" to computed value

// Convert String-formatted options into Object-formatted ones

// Convert anything to text

// Convert dashed to camelCase; used by the css and data modules

// Convert data if not already a string

// Convert html into DOM nodes

// Convert no matter what (that way responseXXX fields are always set)

// Convert non-html into a text node

// Convert options from String-formatted to Object-formatted if needed

// Convert response if prev dataType is non-auto and differs from current

// Convert the values with units to absolute pixels to allow our computations

// Convert to each sequential dataType

// Convert to pixels if value adjustment is needed

// Copy axios.prototype to instance

// Copy context to instance

// Copy function arguments

// Copy the events from the original to the clone

// Copy the properties one-by-one to the cache object

// Counter for holding the number of active queries

// Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted

// Create a new module (and put it into the cache)

// Create a timestamp if incoming event doesn't have one

// Create converters map with lowercased keys

// Create imitation event

// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods

// Create mouseenter/leave events using mouseover/out and event-time checks

// Create scrollLeft and scrollTop methods

// Create target properties

// Create the abort callback

// Create the default instance to be exported

// Create the final options object

// Creates a full fledged settings object into target

// Credits: borrowed code from fcomb/redux-logger

// Cross domain only allowed if supported through XMLHttpRequest

// Cross-browser xml parsing

// DEPRECATED: alias for componentInstance for backwards compat.

// DOM APIs, for completeness

// DOM Exception 18 where it limits to 100 pushState calls

// DOM props

// Data converters

// Deactivate deps tracking while processing error handler to avoid possible infinite rendering.

// Deep merge modifiers options

// Deep watchers and watchers on Object/Arrays should fire even

// Default abort message

// Default implementation is empty

// Default jsonp settings

// Default process is resolve

// Default pull and put value if same group

// Default pull value

// Default speed

// Default value for a checkbox should be "on"

// Defend against cloned attroperties (jQuery gh-1709)

// Deferred helper

// Deferred#then to conditionally suppress rejection.

// Deferreds

// Define Generator.prototype.{next,throw,return} in terms of the

// Define a local copy of jQuery

// Define as getter property because

// Define iterator

// Define the hook, we'll check on the first run if it's really needed.

// Define the unified helper method that is used to implement .next,

// Defining this global in .eslintrc.json would create a danger of using the global

// Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a

// Delay is impossible for native DnD in Edge or IE

// Delayed drag has been triggered

// Delegate to script

// Deliberately forget the last sent value so that we don't

// Deprecated

// Dereference transport for early garbage collection

// Descend through wrappers to the right content

// Deserialize a standard representation

// Detach an event or set of events from an element

// Detached nodes confoundingly follow *each other*

// Detect for pointer elem change, emulating native DnD behaviour

// Detect misreporting of content dimensions for box-sizing:border-box elements

// Detect obvious negatives

// Detect overflow:scroll screwiness (gh-3699)

// Detect show/hide animations

// Detect silently failing push.apply

// Detect whether an element with the move class applied has

// Detect, normalize options and install callbacks for jsonp requests

// Determine event propagation path in advance, per W3C events spec (#9951)

// Determine handlers

// Determine if request has content

// Determine if successful

// Determine new display value for elements that need to change

// Determine the position of an element within the set

// Determine what event timestamp the browser is using. Annoyingly, the

// Disable "draggable"

// Disable .fire

// Disable .fire and .add

// Disable Popper.js if we have a static display

// Disable totally Popper.js for Dropdown in Navbar

// Discard index placeholder values to get only actual matches

// Discard the second event of a jQuery.event.trigger() and

// Disconnected elements can have computed display: none, so first confirm that elem is

// Disconnected nodes

// Dispatch the exception by looping back around to the

// Do a sibling check if the nodes have a common ancestor

// Do not "unfold" after around dragEl if reverted

// Do not detect for empty insert if already inserted

// Do not include comment or processing instruction nodes

// Do not traverse comment nodes

// Do send the request (this may raise an exception)

// Do the same for pointerenter/pointerleave and pointerover/pointerout

// Doctype:

// Document context

// Document order sorting

// Does not start the time, just sets up the members needed.

// Don't automatically add "px" to these possibly-unitless properties

// Don't bother if no value provided

// Don't call next when the page isn't visible

// Don't check non-elements (#13208)

// Don't conflict with Object.prototype properties (#13203)

// Don't consume trailing commas as valid

// Don't do default actions on window, that's where global variables be (#6170)

// Don't do events on text and comment nodes

// Don't enum bug & hidden keys

// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)

// Don't get fooled by Object.prototype properties (jQuery #13807)

// Don't get fooled by e.g. browserify environments.

// Don't get tricked when zoom affects offsetWidth (gh-4029)

// Don't get/set attributes on text, comment and attribute nodes

// Don't get/set properties on text, comment and attribute nodes

// Don't keep the element (issue #299)

// Don't match elem in the :animated selector

// Don't move modal's DOM position

// Don't pass non-elements to Sizzle

// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)

// Don't re-trigger an onFOO event when we call its FOO() method

// Don't return options that are disabled or in a disabled optgroup

// Don't set styles on text and comment nodes

// Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.

// Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.

// Down

// Drag start event

// Drag stop event

// Dummy constructor functions that we use as the .constructor and

// During updates, a kept-alive component's child components may

// ECMAScript 6 symbols shim

// ES3:

// ESM COMPAT FLAG

// EXTERNAL MODULE: ./node_modules/core-js/modules/es7.array.includes.js

// EXTERNAL MODULE: ./node_modules/vue/dist/vue.esm.js

// EXTERNAL MODULE: ./node_modules/vuedraggable/dist/vuedraggable.umd.js

// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js

// EXTERNAL MODULE: ./resources/sass/style.scss

// EXTERNAL MODULE: external {"commonjs":"sortablejs","commonjs2":"sortablejs","amd":"sortablejs","root":"Sortable"}

// Early iOS 10 versions support `attachShadow` but not `getRootNode`,

// Easily-parseable/retrievable ID or TAG or CLASS selectors

// Easy API for creating new setFilters

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1

// Edge's autoscroll seems too conditional,

// Either this is the first call, activity has stopped and we're at the

// Element contains another

// Element context

// Element/input types

// Email認証ページ

// Empty animations, or finishing resolves immediately

// Empty the queue first

// Enable finishing flag on private data

// End tag:

// Enforce case-sensitivity of name attribute

// Enforce single-firing

// Ensure `LazyWrapper` is an instance of `baseLodash`.

// Ensure a hooks for this queue

// Ensure headers exist

// Ensure proper type for the source value

// Ensure that invalid selectors throw exceptions at attach time

// Ensure the complete handler is called before this completes

// Ensure the created nodes are orphaned (#12392)

// Ensure the loop is entered when path is empty.

// Ensure the presence of an event listener that handles manually-triggered

// Ensure the sign of `-0` is preserved.

// Ensure wrappers are instances of `baseLodash`.

// Escape characters that can't be included in string literals.

// Evaluate against documentElement in case elem is a non-element node (e.g., document)

// Evaluate and update our best guess (doubling guesses that zero out).

// Evaluate executable scripts on first document insertion

// Evaluate text as a json expression

// Evaluates a script in a provided context; falls back to the global one

// Event object

// Events bubbling up the document may have been marked as prevented

// Eventオブジェクトのtargetプロパティ内のfilesに選択したファイル情報が入っている

// Exception should still be thrown

// Exception thrown outside of any try block that could handle

// Exclude object elements

// Exclude scripts to avoid IE 'Permission Denied' errors

// Execute a callback for every element in the matched set.

// Execute callbacks for all pending executions,

// Execute immediately if ready is not present

// Execute the appropriate callbacks

// Execute the module function

// Executing both pixelPosition & boxSizingReliable tests require only one layout

// Exit early for strings to avoid a performance hit in some environments.

// Exit early if metadata can't be merged.

// Exit early if the nodes are identical

// Expand context for sibling selectors

// Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.

// Export

// Export for CommonJS support.

// Export for Node.js.

// Export instance

// Export lodash.

// Export to the global object.

// Export utils

// Expose Axios class to allow class inheritance

// Expose Cancel & CancelToken

// Expose Lodash on the global object to prevent errors when Lodash is

// Expose `MapCache`.

// Expose all/spread

// Expose jQuery and $ identifiers, even in AMD

// Expose support vars for convenience

// Extend jQuery itself if only one argument is passed

// Extend the base object

// Extend with the prototype to reset the above stopImmediatePropagation()

// Extending ajaxSettings

// Extract dataTypes list

// Extract error from statusText and normalize for non-aborts

// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)

// FF fix

// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"

// Factory for creating new instances

// Fails to persist the checked state of a cloned checkbox or radio button.

// Fake xhr

// Fall back on getElementsByName

// Fall back to offsetWidth/offsetHeight when value is "auto"

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

// Fallback to prop when attributes are not supported

// Fallback to seeking `elem` from the start

// Fallback to setImmediate.

// Fetch a seed set for right-to-left matching

// File protocol always yields status code 0, assume 200

// File: protocol always yields status 0; see #8605, #14207

// FileReaderクラスのインスタンスを取得

// Filter out possible comments

// Filters

// Find delegate handlers

// Find primary matches

// Find the closest opened tag of the same type

// Find the next relative operator (if any) for proper handling

// Find the second match for the "at" string to get file src url from stack.

// Finish early in limited (non-browser) environments

// Finish if the scale equals or crosses 1 (making the old*new product non-positive).

// Fire an inner synthetic event with the original arguments

// Fire callbacks

// Fire global events if it exists in this sortable

// Fire handlers on the event path

// Firefox and Chrome are good

// Firefox doesn't alert if the returnValue field is not set.

// Firefox doesn't have focus(in | out) events

// Firefox want us to check `-x` and `-y` variations as well

// Fix #1994: using * with props: true generates a param named 0

// Fix #2505 resolving asterisk routes { name: 'not-found', params: { pathMatch: '/not-found' }}

// Fix IE bugs, see support tests

// Fix IE cloning issues

// Fix browsers whose `exec` methods don't consistently return `undefined`

// Fix for #1585 for Firefox

// Fix for #2195 Add optional third attribute to workaround a bug in safari https://bugs.webkit.org/show_bug.cgi?id=182678

// Fix for #2774 Support for apps loaded from Windows file shares not mapped to network drives: replaced location.origin with

// Fix https://github.com/vuejs/vue/pull/7730

// Fix name and attach hooks

// Fix native

// Fixed #973:

// Fixes #9887

// Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications

// Fixes bug #9237

// Flag for duplicate removal

// Flag the module as loaded

// Flag to know if list is currently firing

// Flag to know if list was already fired

// Flag to prevent firing

// Flatten any nested arrays

// Flatten headers

// Fold: Set all multi drag elements's rects to dragEl's rect when multi-drag elements are invisible

// Folding any other time

// For "border" or "margin", add border

// For "content" or "padding", subtract border

// For "content", subtract padding

// For CommonJS and CommonJS-like environments where a proper `window`

// For IE 6–8

// For Promises/A+, convert exceptions into rejections

// For XHR2 non-text, let the caller handle it (gh-2498)

// For a node to qualify as a static root, it should have children that

// For all scripts on the page, if src matches or if ready state is interactive, return the script tag

// For browsers use XHR adapter

// For cross-browser consistency, suppress native .click() on links

// For cross-domain requests, seeing as conditions for a preflight are

// For each dataType in the dataTypeExpression

// For environments that do not have a `window` with a `document`

// For internal use only.

// For mouseenter/leave call the handler if related is outside the target.

// For mutual compressibility with _default, replace `this` access with a local var.

// For non-IE10 modern browsers

// For options that shouldn't be deep extended:

// For plain HTML markup, normalization can be completely skipped because the

// For positioning ghost absolutely

// For props and computed properties, we define the proxy getters on

// For same-domain requests, won't change header if already provided.

// For the native GeneratorFunction constructor, the best we can

// For use in libraries implementing .is()

// For values outside the Basic Multilingual Plane (BMP), manually construct a

// For web workers, where supported

// For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)

// Force an array if not already something iterable

// Force browsers to behave consistently when non-matching value is set

// Force callback invocation

// Force json dataType

// Force options to be an object

// Force setup before trigger

// Force setup before triggering a click

// Forget the data if we're done with it

// FormDataオブジェクトをインスタンス化

// Frame code as the function body.

// From the spec: "Wait until any invocations of this algorithm started before this one have completed."

// Gecko does not error, returns false instead

// GenStateExecuting and loop back for another invocation.

// General show/hide setup for this element animation

// Generate a function of recursive functions that can be used to check each element

// Generate parameters to create a standard animation

// Generate shortcuts for custom animations

// Get a promise for this deferred

// Get a promise resolved when queues of a certain type

// Get again after plugin event

// Get and set the style property on a DOM Node

// Get callback name, remembering preexisting value associated with it

// Get document width or height

// Get document-relative position by adding viewport scroll to viewport-relative gBCR

// Get excess from tokenize (recursively)

// Get initial elements from seed or context

// Get nonempty value(s) by temporarily forcing visibility

// Get popper node sizes

// Get relatively positioned parent

// Get response data

// Get rid of `auto` `auto-start` and `auto-end`

// Get the Nth element in the matched element set OR

// Get the commit method from store

// Get the final matcherOut by condensing this intermediate into postFinder contexts

// Get the index of the dragged element within its parent

// Get the specific value for the option

// Get the whole matched element set as a clean array

// Get transition-duration of the element

// Get transport

// Get width or height on the element, requesting but not forcing parseFloat

// Gets

// Gets all values

// Gets hook for the prefixed version, then unprefixed version

// Getters

// Give the init function the jQuery prototype for later instantiation

// Global attributes allowed on any supplied element below.

// Go through every key on the object,

// Go through the array, only saving the items

// Go through the array, translating each of the items to their new values

// Go to the end state if fx are off

// Grab necessary hook if one is defined

// Guard against undefined "subtract", e.g., when used as in cssHooks

// HANDLE: $(""), $(null), $(undefined), $(false)

// HANDLE: $(#id)

// HANDLE: $(DOMElement)

// HANDLE: $(expr, $(...))

// HANDLE: $(html) -> $(array)

// HANDLE: $(html, props)

// HTML5 custom data-* attrs

// HTTP basic authentication

// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)

// Handle HTML strings

// Handle a deep copy situation

// Handle a returned thenable

// Handle browser request cancellation (as opposed to a manual cancellation)

// Handle cache's special case and crossDomain

// Handle cancellation

// Handle case when target is a string or something (possible in deep copy)

// Handle dropup

// Handle event binding

// Handle falsy url in the settings object (#10093: consistency with old signature)

// Handle firing indexes

// Handle iff the expected data type is "jsonp" or we have a parameter to set

// Handle invocations in a tight loop.

// Handle it asynchronously to allow scripts the opportunity to delay ready

// Handle low level network errors

// Handle most common string cases

// Handle multiple events separated by a space

// Handle other cases based on DOM element used as boundaries

// Handle progress if needed

// Handle special case when .nav-link is inside .nav-item

// Handle state

// Handle the global AJAX counter

// Handle timeout

// Handle viewport case

// Handle when the DOM is ready

// Handle: [ owner, key, value ] args

// Handle: [ owner, { properties } ] args

// Handle: regular nodes (via `this.ownerDocument`), window

// Headers (they are sent all at once)

// Headers whose duplicates are ignored by node

// Helper for defining the .next, .throw, and .return methods of the

// Here we have async deferring wrappers using microtasks.

// Here we just export a default compiler using the default parts.

// Here we make sure to give as "start" the element that comes first in the DOM

// Hook needed; redefine it so that the support test is not executed again.

// Hook not needed (or it's not possible to use it due

// Hook up interceptors middleware

// Hooks for boolean attributes

// However, it has subtle problems when state is changed right before repaint

// However, it is not slated for removal any time soon

// ID filter and find

// ID selector

// IE 10+ support stack trace

// IE 11/Edge don't find elements on a `[name='']` query in some cases.

// IE 6-10 supports script readyState

// IE 8 has a broken Object.defineProperty that only works on DOM objects.

// IE 8- don't enum bug keys

// IE 9's matchesSelector returns false on disconnected nodes

// IE <=9 replaces <option> tags with their contents when inserted outside of

// IE does not seem to have native autoscroll,

// IE doesn't support innerHTML for SVG elements

// IE input[type=range] only supports `change` event

// IE needs attribute set twice to normalize properties

// IE returns zIndex value as an integer.

// IE textarea placeholder bug

// IE throws exception on accessing the href property if url is malformed,

// IE throws on elements created in popups

// IE throws on parseFromString with invalid input.

// IE's :disabled selector does not pick up the children of disabled fieldsets

// IE/Edge & older browsers don't support the :scope pseudo-class.

// IE/Edge misreport `getComputedStyle` of table rows with width/height

// IE/Edge sometimes throw a "Permission denied" error when strict-comparing

// IE10 10 FIX: Please, don't ask, the element isn't

// IE11 WeakMap frozen keys fix

// IE7-

// IE8 returns string on undefined

// IE8 throws error here and will not see later tests

// IE8-

// IE8-9 doesn't update selected after form reset (#2551)

// IE9 has no XHR2 but throws on binary (trac-11426)

// IEEE754 conversions based on https://github.com/feross/ieee754

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).

// Identify a display type, preferring old show/hide data over the CSS cascade

// If "type" variable is undefined, then "GET" method will be used.

// If `separator` is not a regex, use native split

// If `variable` is not specified wrap a with-statement around the generated

// If a hook was provided get the computed value from there

// If a hook was provided get the non-computed value from there

// If a hook was provided, use that value, otherwise just set the specified value

// If a normal DOM Ready event fired, decrement, and wait if need be

// If a number was passed in, add the unit (except for certain CSS properties)

// If a rejected Promise was yielded, throw the rejection back

// If a selector was specified, locate the right elements in a dummy div

// If already at end of list: Do not insert

// If an array was passed in, assume that it is an array of form elements.

// If an exception is thrown from innerFn, we leave state ===

// If animating: compensate for current animation

// If boundary is not `scrollParent`, then set position to `static`

// If browser needs currentScript polyfill, add get currentScript() to the document object

// If comma is not replaced with a dot, the input will be rounded down (i.e. acting

// If context.method was "throw" but the delegate handled the

// If conv2 outputs current

// If curCSS returns percentage, fallback to offset

// If data is available and should be processed, append data to url

// If divider is found, we divide the list of values and operands to divide

// If dragEl is already beside target: Do not insert

// If enqueue has been called before, then we want to wait until

// If event changes its type, use the special event handlers for the changed type

// If input/textarea:

// If it is a node unlikely to be stringify-ed or looped over

// If it receives a jQuery object, the first element is used

// If it's a function

// If it's a touch-enabled device, mouseenter/leave are fired as

// If it's not a number it's an operator, I guess

// If key is an array of keys...

// If leaving sort:false root, or already folding - Fold to new location

// If maybeInvokeDelegate(context) changed context.method from

// If multiple durations are defined, take the first

// If no argument is given, return whether or not list has callbacks attached.

// If no match, return null

// If no nodeType, this is expected to be an array

// If no tag name is provided, clean shop

// If no transport, we auto-abort

// If nobody prevented the default action, do it now

// If none found, seek a pair

// If not input/textarea:

// If not, create one

// If nothing was found internally, try to fetch any

// If obj is provided, the promise aspect is added to the object

// If offsetParent is the reference element, we really want to

// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.

// If prev can be converted to accepted input

// If previous value didn't exist - remove it

// If request was aborted inside a prefilter, stop there

// If request was aborted inside ajaxSend, stop there

// If returning to same place as started from animation and on same axis

// If seed is empty or no tokens remain, we can return early

// If selector defined, determine special event api type, otherwise given type

// If set returns undefined, fall back to normal setting

// If static option listener exists for this option, call in the context of the Sortable's instance of this plugin

// If successful, handle type chaining

// If target is omitted, writes into ajaxSettings.

// If the delegate iterator has a return method, give it a

// If the dispatched exception was caught by a catch block,

// If the element has a class name or if we're passed `false`,

// If the event is namespaced, then each handler is only invoked if it is

// If the fx queue is dequeued, always remove the progress sentinel

// If the nodes are siblings, we can do a quick check

// If the path exists, push it onto the end.

// If the preceding token was a descendant combinator, insert an implicit any-element `*`

// If the selector is sufficiently simple, try using a "get*By*" DOM method

// If the user moves the pointer or let go the click or touch

// If there are functions bound, to execute

// If there is an error parsing the URL, assume it is crossDomain,

// If there's more to do, yield

// If this is a native event triggered above, everything is now in order

// If this is a positional/relative selector, check membership in the returned set

// If this is a touch-enabled device we add extra

// If this is a touch-enabled device we remove the extra

// If this is an inner synthetic event for an event with a bubbling surrogate

// If this script is executing as a CommonJS module, use module.exports

// If this was an empty animation, synthesize a final progress notification

// If traditional, encode the "old" way (the way 1.3.2 or older

// If url is an object, simulate pre-1.5 signature

// If value is a function, invoke it and use its return value

// If we are going to the end, we want to run all the tweens

// If we found a dataType

// If we get here with a content-box, we're seeking "padding" or "border" or "margin"

// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,

// If we have elements to modify, make the request

// If we have memory from a past run, we should fire after adding

// If we include width, step value is 1 to do all cssExpand values,

// Ignore already escaped sequences.

// Ignore double-resolution attempts

// Ignore non-index properties.

// Ignore post-resolution exceptions

// Ignore repeat invocations

// Ignore the finally entry if control is not jumping to a

// Implement show/hide animations

// Implement the identical functionality for filter and not

// In 2.5 we used (macro) tasks (in combination with microtasks).

// In CSS3, :checked should return both checked and selected elements

// In IE/Edge using regex groups here causes severe slowdowns.

// In Safari 8 documents created via document.implementation.createHTMLDocument

// In case of HTML, we need a different computation

// In cases where either:

// In cases where the parent is fixed, we must ignore negative scroll in offset calc

// In non-strict mode we allow a slash at the end of match. If the path to

// In problematic UIWebViews, Promise.then doesn't completely break, but

// In some browsers, typeof returns "function" for HTML <object> elements

// In such cases, we work around the behavior by prefixing every selector in the

// In those cases, the computed value can be trusted to be border-box.

// In-page `selector#id sibling-combinator selector` fails

// Includes all common event props including KeyEvent and MouseEvent specific props

// Incorporate borders into its offset, since they are outside its content origin

// Incorporate the offset, then check against cycle size

// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that

// Index in selector

// Index of currently firing callback (modified by add/remove as needed)

// Init the element's event structure and main handler, if this is the first

// Init the event handler queue if we're the first

// Initial multi-drag fold when drag started

// Initial redirection should not mark the history as ready yet

// Initialize a jQuery object

// Initialize against the default document

// Initialize central reference

// Inject the element directly into the jQuery object

// Inline style trumps all

// Insert callback into url or form data

// Inspect recursively

// Install callback

// Install callbacks on deferreds

// Install script dataType

// Instance methods

// Instance-specific data

// Intentionally let the error be thrown if parseHTML is not present

// Interestingly, IE 10 & older don't seem to have the issue.

// Interestingly, in some cases IE 9 doesn't suffer from this issue.

// Interrupt processing of the outer synthetic .trigger()ed event

// Invalid dates are coerced to `NaN`.

// Invoke the leading edge.

// Is the DOM ready to be used? Set to true once it occurs.

// It's a jQuery object

// Item is non-scalar (array or object), encode its numeric index.

// Iterate over array values

// Iterate over object keys

// Iterate over the tokens and create our regexp string.

// Iteratively approximate from a nonzero starting point

// Iterator interface in terms of a single ._invoke method.

// JSDOM may return undefined for transition properties

// Jump to end and forget the data so .add doesn't re-fire

// Keep an empty list if we have data for future add calls

// Keep pipe for back-compat

// Keep references to cloned scripts for later restoration

// Keep track of which events have ever been used, for event optimization

// Keys separate source (or catchall "*") and destination types with a single space

// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable

// Laravel側へオブジェクトとしてデータを渡すために作成

// Last fire value for non-forgettable lists

// Last-Modified header cache for next request

// Latin Extended-A block.

// Latin-1 Supplement block.

// Lazy-add the new callbacks in a way that preserves old ones

// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter

// Legacy `process.binding('util')` for Node.js < 10.

// Lengthen the array for every element, matched or not

// Leverage slice if possible

// Leverage the exponentiation by squaring algorithm for a faster repeat.

// Listen for ready state

// Listen to events

// Listener for pointer element change

// Live NodeList collection

// Load entry module and return exports

// Local document vars

// Look for any active animations, and finish them

// Look for any animations in the old queue and finish them

// Loop through all the selected options

// Loop trough the offsets arrays and execute the operations

// Loop variable

// MACOS Safari does not have autoscroll,

// MIT license

// MS Edge argumentsList argument is optional

// MS Edge converts symbol values to JSON as {}

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false

// Main method

// Make a writable jQuery.Event from the native event object

// Make dragEl draggable (must be before delay for FireFox)

// Make numeric if forced or a qualifier was provided and val looks numeric

// Make sure animatingRect is on line between toRect & fromRect

// Make sure modifiers like prevent and stop get executed after key filtering

// Make sure textarea (and checkbox) defaultValue is properly cloned

// Make sure that null and NaN values aren't set (#7116)

// Make sure that re-using the options doesn't screw things around

// Make sure that the handler has a unique ID, used to find/remove it later

// Make sure that we're working with the right name

// Make sure that we're working with the right name. We don't

// Make sure the element is visible & connected

// Make sure we set the data so it isn't changed later

// Make sure we trim BOM and NBSP

// Make sure we update the tween properties later on

// Make sure we're not in a plaintext content element like script/style

// Make the changes, replacing each non-ignored context element with the new content

// Make the deferred a promise

// Make this explicit, since user can override this through ajaxSetup (#11264)

// Make value of this field explicit since

// Map minified method names to their real names.

// Map over jQuery in case of overwrite

// Map over the $ in case of overwrite

// Map tuples (progress, done, fail) to arguments (done, fail, progress)

// Margin is only for outerHeight, outerWidth

// Mark it as fixed

// Mark scripts as having already been evaluated

// Match Express-style parameters and un-named parameters with a prefix

// Match any characters still remaining.

// Match elements found at the specified indexes

// Match elements unmatched by `matcher`

// Match escaped characters that would otherwise appear in future matches.

// Match html or make sure no context is specified for #id

// Matches dashed string for camelizing

// Method init() accepts an alternate rootjQuery

// Methods guaranteed to produce a unique set when starting from a unique set

// Microsoft

// Microsoft forgot to hump their vendor prefix (#9572)

// Mimic the constructor's `return` behavior.

// Miscellaneous

// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add

// Modifier activated, select from last to dragEl

// More options handling for requests with no content

// Most of the units rely on the orientation of the popper

// Move element(s) to end of parentEl so that it does not interfere with multi-drag clones insertion if they are inserted

// Move matched elements from seed to results to keep them synchronized

// Move the given value to match[3] whether quoted or unquoted

// Mozilla

// Multi drag elements are not necessarily removed from the DOM on drop, so to reinsert

// Multi-Selects return an array

// Multi-drag drop

// Multi-drag selection

// Multifunctional method to get and set values of a collection

// Multiple arguments are aggregated like Promise.all array elements

// Must access selectedIndex to make default options select

// Must be done after capturing individual rects (scroll bar)

// MutationObserver has wider support, however it is seriously bugged in

// NB: No relatedTarget if the mouse left/entered the browser window

// NOTE: 1 DOM access here

// NOTE: DOM access here

// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`

// NOTE: This cannot be properly polyfilled in engines that don't support

// NOTE: This is equivalent to

// NOTE: these are not considered part of the public API - avoid relying on

// Namespaced trigger; create a regexp to match event type in handle()

// Native handler

// Need init if jQuery is called (just allow error to be thrown if not included)

// Need to be able to calculate position if either

// Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold

// Never move original objects, clone them

// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"

// New element

// New scroll root, set scrollEl

// No argument, return index in parent

// No operation performed.

// Node.js

// Node.js 0.10 has enumerable non-index properties on buffers.

// Node.js 0.8-

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:

// Non `Object` object instances with different constructors are not equal.

// Normalize "" and auto

// Normalize opt.queue - true/undefined/null -> "fx"

// Not all browsers support upload events

// Not being adjusted for

// Not public - generate a queueHooks object, or return the current one

// Not quite $.extend, this won't overwrite existing keys.

// Not sure about the optimal order of these conditions:

// Note that simple async functions are implemented on top of

// Note: DOMNode.style.paddingRight returns the actual value or '' if not set

// Note: ["return"] must be used for ES3 parsing compatibility.

// Note: style is excluded because it relies on initial clone for future

// Note: this is a browser-only function so we can assume elms are DOM nodes.

// Nothing should be selected when empty strings follow ^= or $= or *=

// Null lastTarget if it is not inside a previously swapped element

// Nullify the div so it wouldn't be stored in the memory and

// Number('+0x1') should be NaN, old V8 fix

// OR when it is inside another scoped slot or v-for (the reactivity may be

// Object.prototype.hasOwnProperty.call

// Objects with no prototype (e.g., `Object.create( null )`) are plain

// Objects with prototype are plain iff they were constructed by a global Object function

// Old Firefox doesn't throw on a badly-escaped identifier.

// Old WebKit

// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers

// Older IE sometimes signals "interactive" too soon

// Older WebKit doesn't clone checked state correctly in fragments

// On a manual native abort, IE9 throws

// On some exotic environments, it's not clear which object `setimmediate` was

// On the other hand, just using `getAttribute` is not enough as

// Once for each type.namespace in types; type may be omitted

// One-time assignments

// Only add window if we got to document (e.g., not plain obj or detached DOM)

// Only assign if different to avoid unneeded rendering.

// Only attach events to objects that accept data

// Only certain elements can match :enabled or :disabled

// Only check objects and functions for thenability

// Only convert to a number if it doesn't change the string

// Only deal with non-null/undefined values

// Only deselect if selection is in this sortable

// Only evaluate the response if it is successful (gh-4126)

// Only fire plugin event if plugin is enabled in this sortable,

// Only invoke if we have `lastArgs` which means `func` has been

// Only keep the most recent entries

// Only merged options has the _base property.

// Only normal processors (resolve) catch and reject exceptions

// Only read styles.position if the test has a chance to fail

// Only remove if not folding (folding will remove them anyways)

// Only substitute handlers pass on context

// Only use addEventListener if the special events handler returns false

// Opera 10-11 does not throw on post-comma invalid pseudos

// Operate on a copy of prop so per-property easing won't be lost

// Operator (capture 2)

// Optimize for push.apply( _, NodeList )

// Option elements defer to a parent optgroup if present

// Option to run scripts is true for back-compat

// Optional AJAX dependency, but won't run scripts if not present

// Or just use first one

// Other potentially-special ASCII characters get backslash-escaped

// Otherwise add header to the request

// Otherwise append directly

// Otherwise bring back whatever was previously saved (if anything),

// Otherwise just get the value from the style object

// Otherwise nodes in our document sort first

// Otherwise use the full result

// Otherwise we know they are disconnected

// Otherwise we need full lists of their ancestors for comparison

// Otherwise, check computed style

// Otherwise, if a way to get the computed value exists, use that

// Otherwise, throw an error or return tokens

// Override manipulation of globals by nested matchers

// Override mime type if needed

// Overrides

// Overrides response content-type header

// POST時に、VerifyCsrfTokenミドルウェアがX-CSRF-TOKENリクエストヘッダもチェックします

// Panic based approach to setting things on disconnected nodes

// Parentless nodes are either documents or disconnected

// Parse text as xml

// Pass this if window is not defined yet

// Passing an empty string as a 3rd parameter to .css will automatically

// Per-property setup

// Perform the `toStringTag` check first to avoid errors with some

// PhantomJS / old WebKit has a broken implementations

// PhantomJS 2 has enumerable non-index properties on typed arrays.

// PhantomJS and iOS 7.x

// Piggyback on a donor event to simulate a different one

// Plug for library

// Plugin must exist on the Sortable

// Populate the class2type map

// Position absolutely

// Position-in-collection

// Positional selectors never match, since there's no _selection_ context

// Potentially complex pseudos

// Precompiled matchers will still verify ancestry, so step up a level

// Prefer a tbody over its parent table for containing new rows

// Prefilter to get matcher input, preserving a map for seed-results synchronization

// Prefix every selector in the list

// Prefixed last, checked first

// Prepare `dragstart`

// Prepare the response

// Prepare unfold animation

// Prepend if requested

// Prepend partial segment prefixes.

// Preserve chaining for setter

// Preserve script evaluation history

// Pretend to be hidden if this is a "show" and

// Prevent Object.prototype pollution

// Prevent attribute/property "interpolation"

// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)

// Prevent browser scroll behavior on History popstate

// Prevent memory leaks

// Prevent never-ending loop

// Prevent re-triggering of the same event, since we already bubbled it above

// Prevent triggered image.load events from bubbling to window.load

// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)

// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters

// Private

// Process the value(s)

// Promise is available, we will use it:

// Promise.resolve without an argument throws an error in LG WebOS 2

// Propagate others as results

// Properties of context are called as methods if possible

// Protected

// Provide `match` to avoid retokenization if we modified the selector above

// Provide aliases for supported request methods

// Provide the compiled function's source by its `toString` method or

// Provide the current computed size to request scroll gutter calculation (gh-3589)

// Public

// Purposefully self-exclusive

// Push the current path onto the tokens.

// Put explicitly provided properties onto the event object

// Put hash and anti-cache on the URL that will be requested (gh-1732)

// Put in the new values to get a computed value out

// QSA and matchesSelector support

// Queue of execution data for repeatable lists

// Queue-skipping animations hijack the fx hooks

// Queueing

// Quick check to determine if target is callable, in the spec

// RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed

// Radios and checkboxes getter/setter

// Rather than returning an object with a next method, we keep

// Raw string

// Re-resolve promises immediately to dodge false rejection from

// Real errors are hidden from us by the browser

// Record all 3 overflow attributes because IE does not infer the shorthand

// Recurse if we're merging plain objects or arrays

// Recursively compare arrays (susceptible to call stack limits).

// Recursively compare objects (susceptible to call stack limits).

// Recursively convert values (susceptible to call stack limits).

// Recursively flatten arrays (susceptible to call stack limits).

// Recursively merge objects and arrays (susceptible to call stack limits).

// Recursively populate clone (susceptible to call stack limits).

// Reduce context if the leading compound selector is an ID

// Reenable scripts

// Refactoring modifiers' list (Object => Array)

// RegExp constructor can alter flags and IsRegExp works correct with @@match

// RegExp[@@split] doesn't call the regex's exec method, but first creates

// Regardless of whether this script is executing as a CommonJS module

// Regex strategy adopted from Diego Perini

// Register the controller as a special universal handler for all event namespaces

// Regular

// Regular expressions

// Reintegrate element matches to eliminate the need for sorting

// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857

// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787

// Remaining elements are neither :enabled nor :disabled

// Remember that setFilters inherits from pseudos

// Remember that the DOM is ready

// Remember the hash so we can put it back

// Remember the old values, and insert the new ones

// Remember the original values

// Remember the top-level container

// Remember what we're overwriting

// Remove *all* instances

// Remove Content-Type if data is undefined

// Remove a callback from the list

// Remove all auxiliary multidrag items from el, if sorting enabled

// Remove all callbacks from the list

// Remove any remaining nodes

// Remove auto dataType and get content-type in the process

// Remove boolean attributes when set to false

// Remove classes

// Remove clone(s)

// Remove clones if necessary

// Remove data and the expando if it's no longer used

// Remove draggable attributes

// Remove duplicates

// Remove element nodes and prevent memory leaks

// Remove event

// Remove from its parent by default

// Remove generic event handler if we removed something and no more handlers exist

// Remove hash to simplify url manipulation

// Remove matching events

// Remove resize event listener on window

// Remove scroll event listener on scroll parents

// Remove the expando if there's no more data

// Remove the open elements from the stack

// Remove wrapper from fragment

// Removing the function wrapper causes a "Permission Denied"

// Replace a hexadecimal escape sequence with the encoded Unicode code point

// Replace delimiters with snippets.

// Replace/restore the type attribute of script elements for safe DOM manipulation

// Request state (becomes false upon send and true upon completion)

// Reset any `maxWait` timer.

// Reset state

// Resetting context._sent for legacy support of Babel's

// Resize event listener on window

// Resolve the animation and report its conclusion

// Resolve when we played the last frame; otherwise, reject

// Response headers

// Restart the timer.

// Restore body padding

// Restore fixed content padding

// Restore matcherIn since elem is not yet a final match

// Restore sorting

// Restore sticky content

// Restore the original display value at the end of pure show/hide animations

// Restrict "overflow" and "display" styles during box animations

// Resume execution at the desired location (see delegateYield).

// Rethrow post-completion exceptions

// Retrieve `then` only once

// Retrieving style before computed somehow

// Return 0 if element or transition duration is not found

// Return a confounding non-pixel value or feign ignorance, as appropriate.

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property

// Return a vendor-prefixed property or undefined

// Return all the elements in a clean array

// Return an iterator with no values.

// Return body, `getScroll` will take care to get the correct `scrollTop` from it

// Return early from calls with invalid selector or context

// Return early if doc is invalid or already selected

// Return false to allow normal processing in the caller

// Return invocation when dragEl is inserted (or completed)

// Return jQuery for attributes-only inclusion

// Return just the one element from the set

// Return non-false to allow normal event-path propagation

// Return special upon seeing a positional matcher

// Return the cloned set

// Return the exports of the module

// Return the length of the invalid excess

// Return the modified object

// Return the newly-formed element set

// Return the resulting serialization

// Return zeros for disconnected and hidden (display: none) elements (gh-2310)

// Returns true - if no further action is needed (either inserted or another condition)

// Reuse newcache so results back-propagate to previous elements

// Reuse variable

// Reusing 'index' because we have the correct "name"

// Reverse direction for :only-* (if we haven't yet done so)

// Reverse order for parents* and prev-derivatives

// Revert the changed values

// Revert the old values

// Run callback and check for early termination

// Run delegates first; they may want to stop propagation beneath us

// Run the timer and safely remove it when done (allowing for external removal)

// Running getBoundingClientRect on a

// Running getBoundingClientRect on a disconnected node

// Safari 4 - 5 only, Opera <=11.6 - 12.x only

// Safari 6.0 supports :scope but it's an alias of :root there.

// Safari 9 has enumerable `arguments.length` in strict mode.

// Safari < 10.2 & UIWebView doesn't fire compositionend when

// Safari sends mouseenter too often; see:

// Save back as free

// Save response for use in complete callback

// Save selector and tokenization

// Save sorting

// Save the URL in case we're toying with the If-Modified-Since

// Save the callback name for future use

// Saved data should be false in such cases, but might be a leftover capture object

// Scroll event listener on scroll parents

// See [MDN](https://mdn.io/round#Examples) for more details.

// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display

// See http://requirejs.org/docs/errors.html#mismatch for more details.

// See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.

// See https://bugs.jquery.com/ticket/13378

// See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.

// See https://connect.microsoft.com/IE/feedback/details/1736512/

// See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.

// See https://es5.github.io/#x13.2.2 for more details.

// See https://github.com/facebook/regenerator/issues/274 for more details.

// See https://github.com/jquery/sizzle/pull/225

// See https://github.com/whatwg/html/issues/2369

// See https://html.spec.whatwg.org/#nonce-attributes

// See if we can take a shortcut and just use innerHTML

// See setDocument()

// See ticket #14549 for more info.

// See: https://github.com/vuejs/vuex/issues/1505

// Seedless set matches succeeding multiple successful matchers stipulate sorting

// Seek `elem` from a previously-cached index

// Seek a direct converter

// Select is set to empty string on purpose

// Send global event

// Send the request

// Serialize an array of form elements or a set of

// Serialize array item.

// Serialize object item.

// Serialize scalar item.

// Serialize the form elements

// Set @@toStringTag to native iterators

// Set config.method

// Set data for the fake xhr object

// Set default options

// Set default static properties

// Set document vars if needed

// Set ghost class to new sortable's ghost class

// Set headers

// Set position first, in-case top/left are set even on static elem

// Set proper drop events

// Set readyState

// Set relative to edges of padding box of container

// Set the Accepts header for the server, depending on the dataType

// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.

// Set the base href for the created document

// Set the correct header, if data is being sent

// Set the data...

// Set the display of the elements in a second loop to avoid constant reflow

// Set the guid of unique handler to the same of original handler, so it can be removed

// Set the request timeout in MS

// Set them one by one, and the browser will only set those it can recognize

// Set transform-origin

// Set triggered link as active

// Set triggered links parents as active

// Set when currying a bound function.

// Set width or height on the element

// Sets many values

// Sets multiple values

// Sets one value

// Setting context._sent for legacy support of Babel's

// Setup drag mode

// Setup unfold animation

// Shift arguments if data argument was omitted

// Shift with exponential notation to avoid floating-point issues.

// Shortcut for :nth-*(n)

// Shortcut simple #id case for speed

// Should return 1, but returns 4 (following)

// Shouldn't skip holes

// Shoutout AngusCroll (https://goo.gl/pxwQGp)

// Show any hidden elements after setting opacity to 0

// Show elements before animating them

// Simple values such as "10px" are parsed to Float;

// Simulated bind

// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in

// Since we force visibility upon cascade-hidden elements, an immediate (and slow)

// Single element

// Single tag

// Single- and empty arguments are adopted like Promise.resolve

// Skip elements already in the context collection (trac-4087)

// Skip hidden elements which don't have an offsetParent

// Skip index properties.

// Skip the boolean and the target

// So expect focus to be synchronous when the element is already active,

// So if we're currently running a task, we'll need to delay this invocation.

// So we now use microtasks everywhere, again.

// So, we allow :focus to pass through QSA all the time to avoid the IE error

// Some AMD build optimizers, like r.js, check for condition patterns like:

// Some browsers don't support the "nonce" property on scripts.

// Some elements (templates) need to behave differently inside of a v-pre

// Some styles come back with percentage values, even though they shouldn't

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// Sort multi-drag elements

// Sort on method existence if only one input has compareDocumentPosition

// Sort queue before flush.

// Sort stability

// Spec says greater than zero

// Special processors (notify) just wait for resolution

// Specifically not if we're in a web worker, or react-native.

// Specifically works with the format of stack traces in IE.

// Speed up dequeue by getting out quickly if this is just a lookup

// Standard

// Standard browser envs have full support of the APIs needed to test

// Start tag:

// Start the next in the queue if the last step wasn't forced.

// Start the timer for the trailing edge.

// Start with computed style

// Starting value computation is required for potential unit mismatches

// Static

// Static methods & properties

// Status-dependent callbacks

// Stop scripts or inline event handlers from being executed immediately

// Store and register the task

// Store arguments for use when handling the inner native event

// Store className if set

// Store hidden/visible for toggle so `.stop().toggle()` "reverses"

// Store some children item

// Store the origin module object which passed by programmer

// Store the origin module's state

// Strict HTML recognition (#11290: must start with <)

// Strict mode functions invoked without .call/.apply get global-object context

// String methods call symbol-named RegEp methods

// Strip and collapse whitespace

// Strip and collapse whitespace according to HTML spec

// Style of cloned element affects source element cloned (#8908)

// Subtract margins of documentElement in case it's being used as parent

// Subtract parent offsets and element margins

// Success/Error

// Support array or space separated string of keys

// Support for new CustomEvent feature

// Support values array created by autoprefixer, e.g.

// Support: Android 4.0 - 4.3 only

// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44

// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3

// Support: Android 4.0 only

// Support: Android <=2.3 only

// Support: Android <=2.3 only (functionish RegExp)

// Support: Android <=4.0 only

// Support: Android <=4.0 only, PhantomJS 1 only

// Support: Android <=4.1 - 4.3 only

// Support: Android <=4.1 only

// Support: Android <=4.3 only

// Support: Android<4.0

// Support: Chrome 14-35+

// Support: Chrome <=35 - 45

// Support: Chrome <=35 - 45+

// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1

// Support: Chrome <=57, Firefox <=52

// Support: Chrome <=64

// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+

// Support: Firefox 20+

// Support: Firefox 51+

// Support: Firefox 64+, Edge 18+

// Support: Firefox <=3.6 - 5 only

// Support: Firefox <=42

// Support: Firefox <=43 - 45

// Support: Firefox <=44

// Support: Firefox <=54

// Support: IE 10 - 11+, Edge 15 - 18+

// Support: IE 11 only

// Support: IE 11+

// Support: IE 11+, Edge 15 - 18+

// Support: IE 11+, Edge 17 - 18+

// Support: IE 11, Edge

// Support: IE 6 - 7 only

// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,

// Support: IE 8 - 9 only

// Support: IE 8 only

// Support: IE 9 - 11 only

// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only

// Support: IE 9 - 11+, Edge 12 - 18+

// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only

// Support: IE 9 - 11+, Edge 15 - 18+

// Support: IE 9 only

// Support: IE <9 only

// Support: IE <=10 - 11 only

// Support: IE <=10 - 11, Edge 12 - 13 only

// Support: IE <=11 only

// Support: IE <=11 only, Firefox <=30 (#15098, #14150)

// Support: IE <=11+

// Support: IE <=8

// Support: IE <=8 - 11 only

// Support: IE <=8 - 11, Edge 12 - 15

// Support: IE <=9

// Support: IE <=9 - 10 only

// Support: IE <=9 - 11 only

// Support: IE <=9 - 11+

// Support: IE <=9 - 11, Edge 12 - 15

// Support: IE <=9 only

// Support: IE, Opera, Webkit

// Support: IE8

// Support: IE8, Opera 11-12.16

// Support: IE9-11+

// Support: IE<10

// Support: IE<8

// Support: IE<9

// Support: IE<9, Safari

// Support: Opera 10 - 11 only

// Support: Promises/A+ section 2.3.1

// Support: Promises/A+ section 2.3.3.3.1

// Support: Promises/A+ section 2.3.3.3.3

// Support: Promises/A+ section 2.3.3.3.4.1

// Support: Promises/A+ section 2.3.4

// Support: Promises/A+ sections 2.3.3.1, 3.5

// Support: Safari 6.0 only

// Support: Safari 7 only

// Support: Safari 8 only

// Support: Safari 8+

// Support: Safari 8+, iOS 8+

// Support: Safari <=6 - 7 only

// Support: Safari <=7 - 9.1, Chrome <=37 - 49

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)

// Support: Windows 8 Native Apps

// Support: Windows Web Apps (WWA)

// Support: iOS 10.0-10.2 only

// Support: real iOS 8.2 only (not reproducible in simulator)

// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)

// Swappable if display is none or starts with table

// Symbol-named RegExp methods call .exec

// TODO (fat): remove sketch reliance on jQuery position/offset

// TODO: Not spec compliant, should be false.

// TODO: Now that all calls to _data and _removeData have been replaced

// TODO: identify versions

// TODO: this can be further optimized by properly analyzing in-scope bindings

// Table columns in Safari have non-zero offsetWidth & zero

// Tag

// Take advantage of querySelectorAll

// Take an array of elements and push it onto the stack

// Take the "read" path and allow the get method to determine

// Target should not be a text node (#504, #13143)

// Technically it leverages the (macro) task queue,

// Text node

// Text to html (true = no transformation)

// Thank's IE8 for his funny defineProperty

// Thanks to Andrew Dupont for this technique.

// The ._invoke method unifies the implementations of the .next,

// The JS engine embedded in Adobe products needs `match` returned in

// The `node.getAttribute` check was added for the sake of

// The attrs elements can be null (#14894)

// The broken getElementById methods don't pick up programmatically-set names,

// The calling jQuery object (element matches) is not empty

// The context.catch method must only be called with a location

// The current target watcher being evaluated.

// The current version of jQuery being used

// The default length of a jQuery object is 0

// The deferred used on DOM ready

// The delegate iterator is finished, so forget it and continue with

// The elements to wrap the target around

// The final step of a "hide" animation is actually hiding the element

// The foundational matcher ensures that elements are reachable from top-level context(s)

// The getter ensures a default option is selected

// The identifier C does not have to be a valid language name."

// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append

// The jQuery object is actually just the init constructor 'enhanced'

// The key will always be camelCased in Data

// The matching of C against the element's language value is performed case-insensitively.

// The module cache

// The namespace has been mutated by normalizeNamespace

// The nextTick behavior leverages the microtask queue, which can be accessed

// The ready event handler and self cleanup method

// The request errored out and we didn't get a response, this will be

// The require function

// The root entry object (effectively a try statement without a catch

// The technique has to be used as well when a leading combinator is used

// The template compiler attempts to minimize the need for normalization by

// The test against `importScripts` prevents this implementation from being installed inside a web worker,

// The test attribute must be unknown in Opera but "safe" for WinRT

// The type and name attributes are restricted during .innerHTML assignment

// The url can be an options object (which then must have .url)

// The use of `Object#toString` avoids issues with the `typeof` operator

// The user may use createPseudo to indicate that

// The value/s can optionally be executed if it's a function

// There *must* be a type, no attaching namespace-only handlers

// There will always be at least one argument (an event object), so this array

// There's no need to maintain a stack because all render fns are called

// There's only work to do if current dataType is non-auto

// These helpers produce better VM code in JS engines due to their

// These hooks are used by animate to expand properties

// These usually indicate a programmer mistake during development,

// They will have gone through all possible matchers

// This  #4521 by skipping the unnecessary `checked` update.

// This "if" is needed for plain objects

// This accentuates the need for the creation of a real `window`.

// This allows the user to escape special characters that won't transform.

// This also ensures a stable sort in V8 and other engines.

// This check is needed to avoid errors in case one of the elements isn't defined for any reason

// This corresponds to the behavior of CSS absolute positioning

// This ensures that:

// This environment has a native %IteratorPrototype%; use it instead

// This expression is here for better compressibility (see addClass)

// This file is imported into lib/wc client bundles.

// This happens for inline elements with no explicit setting (gh-3571)

// This is a polyfill for %IteratorPrototype% for environments that

// This is a singleton, we need to execute it only once

// This is against the CSSOM draft spec:

// This is globally unique because only one watcher

// This is only done if running in a standard browser environment.

// This is to test IE's treatment of not explicitly

// This isn't reproducible in IE10 compatibility mode of IE11

// This logic, however, is not guaranteed and can change at any point in the future

// This method will return documentElement in the following cases:

// This module is a runtime utility for cleaner component module output and will

// This module should not be running in strict mode, so the above

// This should fail with an exception

// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the

// This transport only deals with cross domain or forced-by-attrs requests

// This vnode was used in a previous render!

// This was originally intended to fix #4521 but no longer necessary

// This will not pass for IE9, because IE9 DnD only works on anchors

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// This works in non-strict mode

// Thrash, waste and sodomy: IE GC bug

// Timeout

// Timeout neccessary for IE9

// Timers currently will call their complete callbacks, which

// To allow users to avoid auto-installation in some cases,

// To avoid creating an additional object, we just hang the .value

// To know if global events are to be dispatched

// To know if the callbacks have already been called at least once

// Toggle individual class names

// Toggle whole class name

// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id

// Topページ

// Tor Browser bug: Math.asinh(0) -> -0

// Tor Browser bug: Math.atanh(-0) -> 0

// Touch start threshold cannot be greater than the native dragstart threshold

// Track unmatched elements for set filters

// Transform request data

// Transform response data

// Traverse its children

// Treat each array item as a scalar.

// Treat null/undefined as ""; convert numbers to string

// Treat the template element as a regular one in browsers that

// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)

// Trigger the native event and capture its result

// Trim the selector passed to compile

// Trust units reported by jQuery.css

// Try convertible dataTypes

// Try prefixed name followed by the unprefixed name

// Try to minimize operations if there is only one selector in the list and no seed

// Try to shortcut find operations (as opposed to filters) in HTML documents

// Try/catch helper to minimize deoptimizations. Returns a completion

// Turn off finishing flag

// Type selector

// Types can be a map of types/handlers

// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER

// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It

// URL without anti-cache param

// Un-match failing elements by moving them back to matcherIn

// Unbind all events (on this namespace, if provided) for the element

// Unbind events

// Undo chrome's scroll adjustment (has no effect on other browsers)

// Undo what was set in _prepareDragStart before drag started

// Unfold animation for clones if showing from hidden

// Unique for each copy of jQuery on the page

// Unless errors are allowed to bubble, catch and return them

// Unless we *know* we can detect duplicates, assume their presence

// Up

// Update `data` attributes, styles and arrowStyles

// Update global variables

// Update special based on newly reset type

// Uppercase the type

// Url cleanup var

// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)

// Use .is( ":disabled" ) so that fieldset[disabled] works

// Use .style if available and use plain properties where available.

// Use IE sourceIndex if available on both nodes

// Use MutationObserver where native Promise is not available,

// Use `_.noConflict` to remove Lodash from the global object.

// Use `util.types` for Node.js 10+.

// Use a `switch` statement to work with class constructors. See

// Use a negative lookahead to match only capturing groups.

// Use a noop converter for missing script

// Use a property on the element directly when it is not a DOM element,

// Use a stripped-down indexOf as it's faster than native

// Use cssHook if its there.

// Use data converter to retrieve json after script execution

// Use defaultValue in place of getAttribute("value")

// Use getAttributeNode to fetch booleans when getAttribute lies

// Use height if placement is left or right and index is 0 otherwise use width

// Use integer dirruns iff this is the outermost matcher

// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)

// Use native DOM manipulation to avoid our domManip AJAX trickery

// Use offsetWidth/offsetHeight for when box sizing is unreliable.

// Use onreadystatechange to replace onabort

// Use previously-cached element index if available

// Use proper attribute retrieval(#12072)

// Use same guid so caller can remove using origFn

// Use source `argPos` if available.

// Use source `arity` if one is not provided.

// Use source `ary` if it's smaller.

// Use source `func` and merge bitmasks.

// Use source `thisArg` if available.

// Use step hook for back compat.

// Use textContent for elements

// Use the fix-ed jQuery.Event rather than the (read-only) native event

// Use the handy event callback

// Use the original fragment for the last item

// Use the same loop as above to seek `elem` from the start

// Use toString instead of jQuery.type to catch host objects

// Use typeof to avoid zero-argument method invocation on host objects (#15151)

// Used by camelCase as callback to replace()

// Used for iframes

// Used only for `focus(in | out)` events

// Utilize native event if possible so blur/focus sequence is correct

// Utilize native event to ensure correct state for checkable inputs

// V8 bug

// V8 near Chromium 38 has a problem with very small numbers

// V8 throws on boxed symbols

// V8 ~ Android 4.3-

// V8 ~ Chromium 42- fails only with 5+ elements

// Verify that getAttribute really returns attributes and not properties

// Verify the id attribute

// Vnode moved left

// Vnode moved right

// Vue.extend constructor export interop

// Vue.prototype.__patch__ is injected in entry points

// Vuexを使うよという宣言

// Walk down the tree looking for a discrepancy

// Watch for a new set of requests

// We add the dataType to the list if needed

// We allow this because of a bug in IE8/9 that throws an error

// We also use the url parameter if available

// We always set camelCase keys, so remove that.

// We always store the camelCased key

// We assume that it's the callback

// We can accept data for non-element nodes in modern browsers,

// We can fire global events as of now if asked to

// We can use :scope instead of the ID hack if the browser

// We can't cloneNode fragments that contain checked, in WebKit

// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching

// We can't use class properties because they don't get listed in the

// We can't use window.location.hash here because it's not

// We don't need an array for one selects

// We don't want to classify *any* DOM node as a function.

// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2

// We have to close these tags to support XHTML (#13200)

// We must always have either seed elements or outermost context

// We return undefined, instead of nothing here, so it's

// We should always get a number back from opacity

// We tried really hard, but the data doesn't exist.

// We use append for html objects to maintain js events

// We use this for POS matching in `select`

// We're done with this property

// WebKit Array.of isn't generic

// WebKit converts symbol values to JSON as null

// Webkit & Blink performance suffers when deleting properties

// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084

// Webkit/Opera - :checked should return selected option elements

// When a yielded Promise is resolved, its final value becomes

// When changing thing, also edit router.d.ts

// When found, cache indexes on `parent` and break

// When the key is not a string, or both a key and value

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// Where available, offsetWidth/offsetHeight approximate border box dimensions.

// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the

// Where there is no isDisabled, check manually

// With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor

// With one exception: request that using file: protocol, most browsers

// Within the body of any async function, `await x` is transformed to

// Work with a copy of dataTypes in case we need to modify it for conversion

// Works with __proto__ only. Old v8 can't work with null proto objects.

// X-Requested-With header

// XHTML parsers do not magically insert elements in the

// [

// \d\d?

// ]

// __webpack_public_path__

// _f: resolveFilter

// `

// `AdvanceStringIndex` abstract operation

// `RegExp.prototype[@@match]` method

// `RegExp.prototype[@@replace]` method

// `RegExp.prototype[@@search]` method

// `RegExp.prototype[@@split]` method

// `RegExpExec` abstract operation

// `String.prototype.match` method

// `String.prototype.replace` method

// `String.prototype.search` method

// `String.prototype.split` method

// `contentDocument` with a `null` prototype.

// `createCompilerCreator` allows creating compilers that use alternative

// `hasOwn.call(value, "__await")` to determine if the yielded value is

// `i` is now the count of elements visited above, and adding it to `matchedCount`

// `in` check used to prevent JIT error (gh-2145)

// `jQuery.globalEval` so that it can fake a nonce-containing node

// `name` and `type` must use .setAttribute for WWA (#14901)

// `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247

// `setimmediate` library.

// `value` is handled separately because the DOM value may be temporarily

// `value` parameter was not undefined. An empty jQuery object

// `ws` module bug, temporarily remove validation length for Uint8Array

// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test

// `|| data` is dead code meant only to preserve the variable through minification.

// a "grops" property.

// a child.

// a flag to avoid this being observed

// a new one. We need to return the patched regex when creating the new one.

// a reactivated keep-alive component doesn't insert itself

// a successful hydration.

// a uid

// a value is Function if its prototype is function even across different execution context

// able to call the cbs during confirmation as the component was not

// able to install onto.  Search each possibility in the same order as the

// abstract components do not keep anything

// accidentally pass it on to the delegate.

// action, add listener, callbacks,

// actualization

// add "__proto__" for Object.getPrototypeOf polyfill

// add .keys, .values, .entries, [@@iterator]

// add [@@species], 23.1.2.2, 23.2.2.2

// add a raw attr (use this in preTransforms)

// add missing metadata

// add the component's children to its default slot

// add to index

// add unit if the value is numeric and is one of the following

// adding anything as a sibling to the root node is forbidden

// additional parameters

// advance to the next closing parenthesis

// after 2.5. Keeping it for backwards compat with generated code from < 2.4

// after calling the init hook, if the vnode is a child component

// after the browser event has already occurred.

// again. It's not ideal to involve module-specific logic in here but

// akin to a jigsaw puzzle, we simply never set it to be sure.

// all

// all enumerable object keys, includes symbols

// all object keys, includes non-enumerable and symbols

// all other transition classes applied to ensure only the move class

// all previous Promises have been resolved before calling invoke,

// allow further extension/mixin/plugin usage

// allow root elements with v-if, v-else-if and v-else

// allow v-model="obj.val " (trailing whitespace)

// already a merged invoker

// already have an existing method we want to call, so there's no need

// already occurred before other listeners are invoked.

// already pending

// also ensures that the minifier will not anonymize the function.

// also register instance in prepatch hook

// and .done properties off the next function object itself. This

// and CommonJS for browser emulators (#13566)

// and Laura Doktorova's doT.js (https://github.com/olado/doT).

// and blur to be synchronous when the element is not already active.

// and collects all module getters inside this._wrappedGetters

// and fix #3106 so that you can work with location descriptor object having params.pathMatch equal to empty string

// and is always a fresh object, so it's safe to merge into it

// and might be considered as more preferable results.

// and multiple values (non-spec behavior)

// and not the bottom of the html element

// and optional suffixes. Matches appear as:

// and plugin has event defined

// and prevent memory leak

// and refer to originalPlacement to know the original value

// and return the corresponding response

// and skip force updating ones that do not actually use scope variables.

// and the handler would only fire if the event passed to it was fired

// and the second argument - flag - preferred type is a string

// and we need to use the hi-res version for event listener timestamps as

// and when that is passed down this would cause an error

// and when you create one that shouldn't be

// and/or If-None-Match header later on

// animate to rects,

// any additional property we may add in the future

// any necessary setup in a predictable way. This predictability

// any property present in `data.attributes` will be applied to the popper,

// any property present in `data.styles` will be applied to the popper,

// apiStatusを初期化

// append new listeners for router-link

// appendメソッドでフィールドに追加（第1引数：キーを指定、第2引数：valueを指定（ファイル情報））

// apply plugins

// apply post-transforms

// apply pre-transforms

// apply transition data to child

// are already rendered on the client or has no need for initialization

// are based on the document's URL (gh-2965)

// are emptied (fx is the type by default)

// are not just static text. Otherwise the cost of hoisting out will

// are specified, set or extend (existing objects) with either:

// arg is for internal usage only

// args order: tag, data, children, normalizationType, alwaysNormalize

// argument that corresponds to a known catch block.

// arguments are needed to create the filter function

// arguments.

// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

// around the issue.

// array of events

// arrow depends on keepTogether in order to work

// as a comment node but preserves all the raw information for the node.

// as a floor function) causing unexpected behaviors

// as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring

// as such selectors are not recognized by querySelectorAll.

// as the regeneratorRuntime namespace. Otherwise create a new empty

// as these will throw away existing DOM nodes and cause removal errors

// as we run existing watchers

// as xhr.onerror cannot be accessed

// assert node match

// assign target only if condition is true

// assign to this to avoid being removed in tree-shaking

// assignment should always work unless something is misconfigured. Just

// associated DOM element for it.

// assume it's an async component resolve function.

// async component

// async components

// async edge case #6566: inner click event triggers patch, event handler

// async functions in terms of async generators, it is especially

// at instantiation here.

// attach instance registration hook

// attached during that flush.

// attached to outer element during patch, and triggered again. This

// attached. However, calling performance.now() has a perf overhead especially

// attempt a parseFloat and fallback to a string if the parse fails.

// attributes

// attributes that should be using props for binding

// authストアのloginアクションを呼び出す

// automatically dequeued

// avoid catch triggering multiple times when nested calls

// avoid recursion

// avoid resetting cursor position when value is the same

// avoid to make this modifier completely useless and look like broken

// avoids Object.defineProperty calls for each instance created.

// avoriaz seems to mock a non-extensible $scopedSlots object

// axiosで非同期でLaravelAPIを叩いてJSON形式でレスポンスをもらう

// background-* props affect original clone's values

// backwards compatible with the first introduction of Errors

// bail for environments that have buggy event.timeStamp implementations

// based on es5-shim implementation, need to rework it

// based on the rendering backend used.

// basic support for MathML

// be included in the final webpack user bundle.

// be processed after the whole patch process ended.

// because functional components already normalize their own children.

// because it's triggered by the redirection instead

// because they will be changed by vm update

// because we want to refer it in recursive deepCopy

// becomes browsing-context connected.

// been updated.

// before the delay has been reached:

// behavior of getting and setting a style property

// being emptied incorrectly in certain situations (#8070).

// being equal to the identifier C,

// bind

// bind commit and dispatch to self

// bind on install

// bind store public getters

// bind the createElement fn to this instance

// bind timers to global for call from export context

// binding to window is necessary to make hot reload work in IE in strict mode

// boolean has higher priority

// bottom/right side

// browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339

// bubbling surrogate propagates *after* the non-bubbling base), but that seems

// but Flash expects a value of "true" when used on <embed> tag

// but ToNumber should return NaN if a string contains unavailable symbols

// but at the same time, it doesn't make much sense to select an element with an id and an extra selector

// but for some reason `nativeSlice.call(result, 1, result.length)` (called in

// but in some cases we have to bail-out of this optimization

// but it is still a better choice than setTimeout.

// but it must have a current display style that would benefit

// but only if it is a raw options object that isn't

// but that will not handle a native abort

// but those exceptions were never presented as a real life use-cases

// but we should not, see #8335.

// but width seems to be reliably pixels.

// by a handler lower down the tree; reflect the correct value.

// by any combination of letters, digits, plus, period, or hyphen.

// by default scoped slots are considered "stable", this allows child

// by using document.implementation

// c.f. https://nodejs.org/api/http.html#http_message_headers

// cache component

// cache constructor

// cache original method

// cache resolved

// cached call

// cached from whatever global is present so that test runners that stub it

// call component updated and activated hooks

// call enter callback now

// call factory function for non-Function types

// call invoke immediately, without waiting on a callback to fire,

// call leave callback now

// call something on iterator step with safe closing on error

// call the last hook...

// camelCase, specialEasing and expand cssHook pass

// can be evaluated at a time.

// can have their private assets too.

// can we use __proto__?

// can't set metadata to uncaught frozen object

// cancel dnd

// card_idはオブジェクト形式で、{id: 7} の様に入ってくる。

// card_idは数値のみで渡ってくるので、key:value の形で渡してやるために一度オブジェクト形式で代入している

// case, which will result in a "00" `matchedCount` that differs from `i` but is also

// catch redirect option https://github.com/vuejs/vue-router/issues/3201

// cater for pre-defined getter/setters

// causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

// certain weird environments...

// chance to clean up.

// change existing entry

// change, so directly walking the tree here may call activated hooks

// changed after adding errors with

// check cache

// check capture modifier

// check compilation errors/tips

// check default value

// check history fallback deeplinking

// check if past first invert threshold on side opposite of lastDirection

// check if there are any late-modified/attached options (#4976)

// check if there are dynamic scopedSlots (hand-written or compiled but with

// check if this is server-rendered content and if we can perform

// check inline-template render functions

// check is required in this first loop unless we have a nonempty display value (either

// check local registration variations first

// check namespace.

// check nested equality

// check object-style commit

// check object-style dispatch

// check on default Array iterator

// check pattern

// check platforms/web/util/attrs.js acceptValue

// check pre state

// checked="checked" or checked

// child component listeners instead of DOM listeners

// child component. it should have hydrated its own tree.

// class prototype and break stuff like Sinon stubs

// clean out app from this.apps array once destroyed

// clean up event listeners

// clone children array to avoid mutating original in case of cloning

// clone observed objects, as the user probably wants to mutate it

// clone reused vnode

// clone to prevent mutation

// code to add the data object to the top of the scope chain.

// collapse sibling forms: the second one becomes a child of the first one.

// collection id

// collection type

// comments should still be allowed, but ignored

// commitでミューテーションのsetApiStatus呼び出している、最初には引数に入るデータはnull

// commitでミューテーションのsetApiStatus呼び出している、最初には引数に入るデータはnull（初期化）

// compile

// compile-time directive that manipulates AST.

// compiled as a scoped slot, render fn users would expect it to be present

// compiled slot content. To avoid that, we generate a unique key based on

// completely stops working after triggering a few times... so, if native

// complex values such as "rotate(1rad)" are returned as-is.

// component also has set the placeholder vnode's elm.

// component constructor creation

// component instance. This key will be used to remove pending leaving nodes

// component itself.

// component or element

// component prototype. We only need to define computed properties defined

// component v-model

// component v-model doesn't need extra runtime

// component's mounted hook), which relies on vm._watcher being already defined

// component-defined computed properties are already defined on the

// componentName is el.component, take it as argument to shun flow's pessimistic refinement

// components with in Weex's multi-instance scenarios.

// components with only scoped slots to skip forced updates from parent.

// compute auto placement, store placement inside the data object,

// compute center of the popper

// compute reference element offsets

// compute the popper offsets

// computed properties are just getters during SSR

// condense consecutive whitespaces into single space

// config

// confirm transition and pass on the value

// considered in DOM in some circumstances...

// consistent across browsers - Firefox will pre-decode it!

// console.log( 'これはカードid：' + folder_id + '  ' + 'これはフォルダid：' + card_id)

// constructor polyfill

// contains in native

// context (optional): If specified, the fragment will be created in this context,

// context.dispatchException(context.arg) call above.

// context.method was "next", forget context.arg since it has been

// convert -0 to +0

// convert primitive to vnode

// copy other options

// correct subclassing with @@species support

// correct value when it hasn't been explicitly set

// count of uncompleted subordinates

// count of unprocessed arguments

// create a fake namespace object

// create an empty node and replace it

// create asset registers, so extended classes

// create collection constructor

// create internal watcher for the computed property.

// create new node

// createDict = iframe.contentWindow.Object;

// createdライフサイクルフックで、表示が残っていたバリデーションメッセージを消す

// cross-realm fallback

// current iteration.

// data from the HTML5 data-* attribute

// dataFilter is not invoked for failure responses, so using it instead

// dataPriv.set( el, "click", ... )

// dataPriv.set( this, "blur", ... )

// dataPriv.set( this, "focus", ... )

// dataTypeExpression is optional and defaults to "*"

// debounced at least once.

// deep extended (see ajaxExtend)

// deep updates (#7063).

// default key for nested array children (likely generated by v-for)

// defaults to document

// deferred.done(function() { bind to newDefer or newDefer.resolve })

// deferred.fail(function() { bind to newDefer or newDefer.reject })

// deferred.notify = function() { deferred.notifyWith(...) }

// deferred.notifyWith = list.fireWith

// deferred.progress(function() { bind to newDefer or newDefer.notify })

// deferred.reject = function() { deferred.rejectWith(...) }

// deferred.rejectWith = list.fireWith

// deferred.resolve = function() { deferred.resolveWith(...) }

// deferred.resolveWith = list.fireWith

// define __esModule on exports

// define getter function for harmony exports

// delay insert hooks for component root nodes, invoke them after the

// delegate iterator, or by modifying context.method and context.arg,

// delete the 0 if it was added

// dependencies for deep watching

// descendant combinators, which is not what we want.

// destroy old node

// detect devtools

// detect such cases and filter out values that no longer has a matching

// determine the normalization needed for the children array.

// determine whether component has slot children

// determine whether this is a plain element after

// devtool hook

// devtools global hook

// did it), otherwise encode params recursively.

// differently when margins are applied to it. The margins are included in

// direct component options / constructor

// direct inline function use will lead to closure preserving oldVm.

// directives first.

// directives may mutate the el's other properties before they are generated.

// directly removing

// directly use parent context's createElement() function

// disable the delayed drag

// disconnected due to the intermediate scope variable)

// disconnected node in IE throws an error

// dispatch changes in all subscribed watchers

// do is to check its .name property.

// do not cache length because more watchers might be pushed

// do not log it twice

// do not make component slot content static. this avoids

// do not use `remove` because IE11 doesn't support it

// document.currentScript polyfill by Adam Miller

// does not trigger because the inner node's created hooks are not called

// doesn't get processed by processAttrs.

// doesn't have <a> child, apply listener to self

// doing this because it's faster than dynamic enumeration.

// don't break things.  But we need to wrap it in a try catch in case it is

// don't natively support it.

// don't redirect if `target="_blank"`

// don't redirect on right click

// don't redirect when preventDefault called

// don't redirect with control keys

// don't support it.

// drag & drop within the same list

// drag from one list and drop into another

// dragEl shadow (target move distance shadow)

// draggableのイベントハンドラー：動作が開始され要素のコピーが行われた時

// draggableのイベントハンドラー：配列に要素が追加されたときに発火

// draggableコンポーネントからchangeイベントを拾って処理を行う

// during Vue.extend(). We only need to proxy props defined at

// during entering.

// during template compilation

// dynamic slot names). Static scoped slots compiled from template has the

// e.g. <option disabled>Select one</option>

// e.g. <template slot="xxx">, <div slot-scope="xxx">

// e.g. <template>, <slot>, v-for, or when the children is provided by user

// e.g. PhantomJS, iOS7, Android 4.4

// e.g. `value` on <progress> w/ non-finite value

// e.g. for directives that uses the "inserted" hook.

// e.g. http://example.com:80x/

// e.g. var jQuery = require("jquery")(window);

// early implementations not supports chaining

// easier to handle this case. if(!global) { ...}

// either not server-rendered, or hydration failed.

// electron/nw.js app, since event.timeStamp will be using a different

// elem.tabIndex doesn't always return the

// element is really inserted

// element may have already been removed due to v-html / v-text

// email変更

// email情報をセット

// email情報を呼び出す

// empty component root.

// empty element, allow client to pick up and populate children

// empty mount (likely as component), create new root element

// empty mouseover listeners to the body's immediate children;

// empty mouseover listeners we added for iOS support

// empty path

// empty string to avoid regexp issues

// emulate drag over during autoscroll (fallback), emulating native DnD behaviour

// enable recursive self-lookup

// enable strict mode for new vm

// enough that all such attempts are guarded in a try block.

// enqueue has not been called before, then it is important to

// ensure a key that is unique to the vnode type and to this transition

// ensure collecting deps for deep class bindings for future updates

// ensure correct active class is set to match the controls' actual values/states

// ensure leading slash

// ensure only append when value is already string, otherwise it will be cast

// ensure runtime directive metadata

// ensure swiping with one touch and not pinching

// ensure we still have a main app or null if no apps

// ensure wildcard routes are always at the end

// equals `i`), unless we didn't visit _any_ elements in the above loop because we have

// error in IE

// errors on any property access that is not readyState

// eslint rule "no-unused-expressions" is disabled for this code

// eslint-disable-line

// eslint-disable-line dot-notation

// eslint-disable-line no-new

// eslint-disable-line no-script-url

// eslint-disable-line no-undef

// eslint-disable-line no-unused-vars

// eslint-disable-line prefer-rest-params

// eslint-disable-next-line complexity

// eslint-disable-next-line eqeqeq

// eslint-disable-next-line max-statements

// eslint-disable-next-line no-loop-func

// eslint-disable-next-line no-new-func

// eslint-disable-next-line no-param-reassign

// eslint-disable-next-line no-prototype-builtins

// eslint-disable-next-line no-self-compare

// eslint-disable-next-line no-throw-literal

// eslint-disable-next-line no-undef

// eslint-disable-next-line no-unused-expressions

// eslint-disable-next-line no-unused-vars

// eslint-disable-next-line no-useless-call

// essentially merged when rendered to HTML strings

// even immediately after element creation

// event handlers

// event is fired after handler attachment

// events to fire) we explicitly restart cycling

// events.

// every

// every time the scheduler flushes and use that for all event listeners

// except "table", "table-cell", or "table-caption"

// except for inputs with v-bind:type

// exception, let the outer generator proceed normally. If

// excess is a negative index

// excluded

// execute code before the first await. Since we implement simple

// executor callback, and why async functions synchronously

// existing directive, update

// existing plain hook

// explicitness and function inlining.

// export

// export native or passed

// export proto methods to core.%CONSTRUCTOR%.methods.%NAME%

// export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%

// expose FunctionalRenderContext for ssr runtime helper installation

// expose normal slots on scopedSlots

// expose real self

// expose the module cache

// expose the modules object (__webpack_modules__)

// exposed util methods.

// exposing $options for renderStatic()

// expression

// extend global

// extend now so that global mixins are applied.

// extends keepTogether behavior making sure the popper and its

// extract listeners and pass them directly to the transition methods

// extract listeners, since these needs to be treated as

// extract local getter type

// extract props

// extracted by mini-css-extract-plugin

// extremely rare edge case: do not insert if old element is in a

// faking a content-box to get border and padding (gh-3699)

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window

// fallback for non-array-like ES3 and non-enumerable old V8 strings

// fallback for not array-like ES3 strings and DOM objects

// fallback for not array-like strings

// fallback to prototype chain

// falling back to the empty string if nothing was stored.

// false -> Array#indexOf

// false -> String#codePointAt

// false or null will remove the attribute but undefined will not

// false when <= IE11

// fast apply, http://jsperf.lnkit.com/fast-apply/5

// fast case

// fast case for arrays with default iterator

// fast equal /^0b[01]+$/i

// fast equal /^0o[0-7]+$/i

// fast path 1: child component re-render only, parent did not change

// fast path 2: stable scoped slots w/ no normal slots to proxy,

// filter

// filter out scoped slots

// filter out text nodes (possible whitespaces)

// final children cleanup

// find

// find all button toggles

// find all checkboxes/readio buttons inside data-toggle groups

// find first non-whitespace prev char

// find it as the prev node.

// find the first <a> child and apply listener and href

// findIndex

// fire destroyed hook

// fire ready cbs once

// fire the first update to position the popper in the right place

// fires "change" instead of "input" on autocomplete.

// first entry

// first filter, end of expression

// first pass: mark all non-static nodes.

// fix Array#{values, @@iterator}.name in V8 / FF

// fix for some old engines

// fixes an issue with getting wrong values

// flow complains about extra args which is why we use any

// flow somehow has problems with directly declared definition object

// focus() and blur() are asynchronous

// focus() and blur() are asynchronous, except when they are no-op.

// focus(in | out) events fire after focus & blur events,

// focus/blur morphs to focusin/out; ensure we're not firing them right now

// for 1.x backwards compatibility.

// for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/

// for all the other DOM elements, this one is good

// for backwards compat

// for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:

// for example if the slot contains dynamic names, has v-if or v-for on them...

// for lazy watchers

// for more details.

// for script (e.g. type="x/template") or style, do not decode content

// for selection with modifier key down (SHIFT)

// for slot content they should also get the scopeId from the host instance.

// for template-only hot-reload because in that case the render fn doesn't

// for the description of the bug (it existed in older Chrome versions as well).

// for transition enter check

// force reflow to put everything in position

// force removing pass

// forced

// forces the browser to respect setting selected

// formdataオブジェクトの中身を見る https://qiita.com/_Keitaro_/items/6a3342735d3429175300

// fragment in IE 9

// from DOM nodes, so set to undefined instead

// from an async native handler (gh-4350)

// from identically-valued overflowX and overflowY and Edge just mirrors

// frozen object case

// frozen object may not have observer.

// fulfilled_callbacks.disable

// fulfilled_handlers.add( ... )

// fulfilled_handlers.disable

// fulfilled_handlers.fire

// function because try/catches deoptimize in certain engines.

// function.sent implementation.

// functional

// functional component

// functional template

// g can still be undefined, but nothing to do about it...

// generated render function is guaranteed to return Array<VNode>. There are

// get dispatch function from store

// get next entry

// get reference and popper elements (allow jQuery wrappers)

// getBoundingClientRect().width unless display is changed.

// getComputedStyle returns percent when specified for top/left/bottom/right;

// getDefaultExport function for compatibility with non-harmony modules

// getElementById can match elements by name instead of ID

// getElementById is not reliable as a find shortcut

// getElementById would still fail if the selector contains a more complicated query like #main[data-attr]

// getPropertyValue is needed for:

// getters and state object must be gotten lazily

// getting tag from 19.1.3.6 Object.prototype.toString()

// ghostClass is added in dragStarted

// global

// global before hooks

// go one step up and use the next offsetParent as reference to

// go through the normalizer

// hack for #4339: a reactivated component with inner transition

// handle <slot/> outlets

// handle IE svg bug

// handle content being passed to a component as slot,

// handle null value #1566

// handle transition classes

// handle transition mode

// handleObj is passed to all event handlers

// handled by onerror instead

// handler w/ dynamic event name

// happens because browsers fire microtask ticks between event propagation.

// has a stable shape and so hopefully should be cheap to allocate.

// has new static slots

// has old static slots

// hasOwn isn't used here due to false negatives

// have been (and was previously) designed to take a closure to be

// have mutated.

// helper for String#{startsWith, endsWith, includes}

// helper to dynamically append modifier runtime markers to event names.

// helpers

// here, we listen for touchend, explicitly pause the carousel

// hide multi drag elements (by positioning them absolute),

// history route not updated since async guard at the same time.

// historyモードを指定

// hoist static sub-trees out

// html.removeChild(iframe);

// http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist

// http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment

// http://www.matts411.com/post/internet-explorer-9-oninput/

// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked

// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters

// http://www.w3.org/TR/css3-selectors/#whitespace

// http://www.w3.org/TR/selectors/#empty-pseudo

// http://www.w3.org/TR/selectors/#lang-pseudo

// http://www.w3.org/TR/selectors/#pseudo-classes

// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)

// https://bugs.chromium.org/p/chromium/issues/detail?id=470258

// https://bugs.chromium.org/p/v8/issues/detail?id=3443

// https://bugs.jquery.com/ticket/12359

// https://bugs.jquery.com/ticket/13393

// https://bugs.jquery.com/ticket/4833

// https://bugs.webkit.org/show_bug.cgi?id=136851

// https://bugs.webkit.org/show_bug.cgi?id=137337

// https://drafts.csswg.org/cssom/#common-serializing-idioms

// https://drafts.csswg.org/cssom/#resolved-values

// https://github.com/facebook/flow/issues/285

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim

// https://github.com/tc39/Array.prototype.includes

// https://github.com/tc39/proposal-global

// https://github.com/tc39/proposal-object-getownpropertydescriptors

// https://github.com/tc39/proposal-object-values-entries

// https://github.com/tc39/proposal-promise-finally

// https://github.com/tc39/proposal-string-pad-start-end

// https://github.com/twbs/bootstrap/issues/24251

// https://github.com/vuejs/vue-router/issues/2341

// https://github.com/vuejs/vue-router/issues/2639

// https://github.com/vuejs/vue-router/issues/3225

// https://github.com/vuejs/vue-router/issues/3294

// https://github.com/vuejs/vue-router/issues/3331

// https://github.com/vuejs/vue-router/pull/3047 before that change,

// https://github.com/websockets/ws/pull/645

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028

// https://html.spec.whatwg.org/#strip-and-collapse-whitespace

// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled

// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled

// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2

// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace

// https://jsperf.com/thor-indexof-vs-for/5

// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section

// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume

// https://promisesaplus.com/#point-48

// https://promisesaplus.com/#point-54

// https://promisesaplus.com/#point-57

// https://promisesaplus.com/#point-59

// https://promisesaplus.com/#point-61

// https://promisesaplus.com/#point-64

// https://promisesaplus.com/#point-75

// https://readouble.com/laravel/5.8/ja/csrf.html#csrf-x-xsrf-token

// https://tc39.github.io/ecma262/#sec-advancestringindex

// https://tc39.github.io/ecma262/#sec-getsubstitution

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split

// https://tc39.github.io/ecma262/#sec-regexpexec

// https://tc39.github.io/ecma262/#sec-string.prototype.match

// https://tc39.github.io/ecma262/#sec-string.prototype.replace

// https://tc39.github.io/ecma262/#sec-string.prototype.search

// https://tc39.github.io/ecma262/#sec-string.prototype.split

// https://tc39.github.io/ecma262/#sec-toindex

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap

// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray

// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/

// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/

// https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

// https://www.ritolab.com/entry/173

// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html

// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click

// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram

// hydrating

// iOS Safari 7.x bug

// ie9 setting to null has no effect, must use empty string

// ie9- setTimeout & setInterval additional parameters fix

// if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll

// if `inner` modifier is enabled, we can't use the `flip` modifier

// if a Content Security Policy forbids using Function, but in that case

// if already flushing, splice the watcher based on its id

// if already past its id, it will be run next immediately.

// if an hypothetical scrollbar is detected, we must be sure it's not a `border`

// if arrowElement is a string, suppose it's a CSS selector

// if arrowElement is defined and arrowStyles has some properties

// if arrowElement is not found, don't run the modifier

// if at this stage it's not a constructor or an async component factory,

// if childNode is not null, it means the actual childNodes list is

// if clearTimeout wasn't available but was latter defined

// if fromRect != toRect: animate

// if has already-rendered static tree and not inside v-for,

// if is an explicit pixel unit, we get rid of the unit and keep the value

// if is an implicit unit, it's px, and we return just the value

// if it's a function and doesn't have cid attached,

// if it's not a radio button or checkbox don't add a pointless/invalid checked property to the input

// if no content

// if not specified.

// if obj is hit, it is in circular structure

// if object isn't iterable or it's array with default iterator - use simple case

// if parent is an HOC, update its $el as well

// if popper is destroyed, don't perform any further update

// if setTimeout wasn't available but was latter defined

// if shift shiftvariation is specified, run the modifier

// if the arrowElement isn't a query selector we must check that the

// if the event timestamp, although evaluated AFTER the Date.now(), is

// if the new node is not cloned it means the render functions have been

// if the page has thousands of event listeners. Instead, we take a timestamp

// if the returned array contains only a single node, allow it

// if the route transition has already been confirmed then we weren't

// if the user intentionally throws the original error in the handler,

// if the user uses an arrow function shorthand that happens to

// if the vm is being destroyed.

// if this is a component root node and the component's

// if we're just parsing

// ignore children if the node has textContent or innerHTML,

// ignore slots that contains only whitespace

// immediately.

// implementation and does not fire microtasks in between event propagation, so

// implementations (#9632)

// important for dynamic transitions!

// important to get this right, even though it requires care.

// important: remove merged hook to ensure it's called only once

// in IE throws an error.

// in Safari 9 which returns 'object' for typed arrays and other constructors.

// in Webpack 2, require.ensure now also returns a Promise

// in a Vue.extend merge, both should be functions

// in a locale-dependent way, using a comma instead of a dot.

// in case kept-alive component be actived when routes changed

// in case of component :is set to falsy value

// in case runtime.js accidentally runs in strict mode, we can escape

// in case the <a> is a static node

// in case the child is also an abstract component, e.g. <keep-alive>

// in case the object is already observed...

// in case the options rendered by v-for have changed,

// in case the same component instance is reused across different routes

// in each iteration - which helps prevent layout thrashing.

// in every case, so we don't have to touch the arguments object. The

// in non-ending mode, where "/test/" shouldn't match "/test//route".

// in some cases, the event used has to be determined at runtime

// in that case we can just return the element and be done.

// in that case, element will be second argument

// in the case the route map has been dynamically appended to

// in the document.

// in this case we want to make sure we are able to get a hold to the

// in this way the first offset will use an axis and the second one

// in this way we can make the 3rd party modifiers add custom styles to it

// in-component leave guards

// in-component update hooks

// in-config enter guards

// increase the listeners count

// index

// inherit parent ns if there is one

// init all modules

// init parent attached events

// init root module.

// init state

// initialize the store vm, which is responsible for the reactivity

// inject component registration as beforeCreate hook

// inject component styles

// inject is :any because flow is not smart enough to figure out cached

// injected by v-model runtime

// injected easily by `bin/regenerator --include-runtime script.js`.

// inline hooks to be invoked on component VNodes during patch

// inline or about-to-be-restored)

// inline-template

// innerText usage removed for consistency of new lines (jQuery #11153)

// install component management hooks onto the placeholder node

// install platform patch function

// install platform runtime directives & components

// install platform specific utils

// install runtime convenience helpers

// instance merge

// instantiation here.

// instead of a hash lookup

// instead of the ES6 spec version, we didn't implement @@toPrimitive case

// instead of the first because it can end up

// interceptorsを使用することでエラーのレスポンスをまとめる事ができる

// internal component options needs special treatment.

// internal version is used by render functions compiled from templates

// into the async generator function so it can be handled there.

// into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.

// invert always

// invocations of the iterator.

// invoke callbacks only if this is not a synchronous resolve

// invoke destroy hooks on current rendered tree

// invoke insert hooks that may have been merged by create hooks.

// invoked without arguments, but in all the cases we care about we

// is NOT fired) and after a timeout (to allow for mouse compatibility

// is applied.

// is based solely on the element's language value

// is needed to cater to all possible types of children values.

// is present, execute the factory and get jQuery.

// is valid at the end of a path match, not in the middle. This is important

// is why the Promise constructor synchronously invokes its

// isHiddenWithinTree might be called from jQuery#filter function;

// issue #9511

// it as the trailing edge, or we've hit the `maxWait` limit.

// it can be rejected by the transport if it is invalid

// it can get stuck in a weird state where callbacks are pushed into the

// it should've created a child instance and mounted it. the child

// it will also be a sign that checks already performed

// it's important to place the event as the first in the array because

// it's possible for the same component to be reused but with different

// it's possible that the value is out-of-sync with the rendered options.

// it, so set the completion value of the entire function to

// iterate and compare children lists

// iterator prototype chain incorrectly implement this, causing the Generator

// jQuery handler

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding

// jQuery.proxy is deprecated to promote standards (specifically Function#bind)

// jQuery.support is not used in Core but other projects attach their

// just as Sizzle does

// just return if obj is immutable value

// keep a copy of raw propsData

// keep a reference to the super options at extension time.

// keep copies of post queues before resetting state

// keep it in the children list so that v-else(-if) conditions can

// keep-alive + HOCs. (#4590)

// keepScripts (optional): If true, will include scripts passed in the html string

// kept-alive components, treat as a patch

// key

// key events that do not have keyCode property...

// key/values into a query string

// keys

// kind

// lang value must be a valid identifier

// last entry

// later at instantiation we can check if Super's options have

// leading to errors. We need to check for `getRootNode`.

// leak store for uncaught frozen objects

// leaving transition. Only happens when combining transition +

// left/right

// length should be 1, old FF problem

// less bad than duplication.

// lines of this modifier!

// list of modules that can skip create hook during hydration because they

// list with an ID selector referencing the scope context.

// loaded by a script tag in the presence of an AMD loader.

// local getters

// local state

// locate first non-abstract parent

// location outside the try/catch block.

// location.host contains the port and location.hostname doesn't

// locations where there is no enclosing try statement.

// longer than the virtual children list.

// main app previously initialized

// make current key freshest

// make static versions for prototype methods

// make sure the key filters only apply to KeyboardEvents

// make sure there's the starting slash

// make sure to clone it if it's reactive, since the user likely wants

// make sure to invoke the insert hook

// make sure to observe it.

// make update() debounced, so that it only runs at most once-per-tick

// makes the latter nonnegative.

// manually mounted instance, call mounted on self

// map

// mark el non-plain so data gets generated

// mark element as dynamic

// mark the event as captured

// mark v-show

// mark vuex getter for devtools

// marker for reverse proxying v-slot without scope on this.$slots

// match already ends with a slash, we remove it for consistency. The slash

// matchesSelector(:active) reports false when true (IE9/Opera 11.5)

// may return an Array instead of a single root. In this case, just a simple

// may throw

// meant to be awaited.

// merge adjacent text nodes

// merge custom directives

// merge custom modules

// merge helper so that class/style/mustUseProp attrs are handled correctly.

// merge options

// merge static and dynamic style data on the same vnode

// mess with these values

// method always terminates the yield* loop.

// microtask queue but the queue isn't being flushed, until the browser

// minifier not to mangle the names of these two functions.

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// modifiers

// modifiers have the ability to execute arbitrary code when Popper.js get inited

// modifiers will be able to edit `placement` if needed

// module data generation functions

// module transforms

// module.parent = undefined by default

// most Object methods by ES6 should accept primitives

// mounted is called for render-created child components in its inserted hook

// mounting to a real element

// multiDragElements will already be sorted if folding

// multiple renders, cloning them avoids errors when DOM manipulations rely

// multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2

// must be done before animation

// named slots should only be respected if the vnode was rendered in the

// named target

// native event and prevent that from happening again here.

// necessary to ensure parent re-render when deep bindings like :style and

// need to resolve new options.

// needed during codegen.

// needs to do some other work, e.g. handle a timer. Therefore we can

// never gets called

// new directive, bind

// new parent vnode

// new syntax in Vue 2.3

// next index

// next('/') or next({ path: '/' }) -> redirect

// next('/profile')とすると、自分自身コンポーネント呼び出し続けてエラーになるので注意！

// next(false) -> abort navigation, ensure current URL

// no bubbling and not fallback

// no bubbling, should always fire.

// no default, return undefined

// no element matchers and no seed.

// no existing hook

// no longer present, unbind

// no match

// no offsetParent is present, I hate this job...

// node.  All pre nodes are static roots, so we can use this as a location to

// nodeType < 6 works because attributes (2) do not appear as children

// nodeType defaults to 9, since context defaults to document

// non root node in pre blocks with no attributes

// non-string values will be stringified

// non-xml :nth-child(...) stores cache data on `parent`

// noop

// normal directives

// normalization is always applied for the public version, used in

// normalization is needed - if any child is an Array, we flatten the whole

// normalize click.right and click.middle since they don't actually fire

// normalize possible array / string values into Object

// normalize v-model event tokens that can only be determined at runtime.

// normalized at this point

// not a built-in

// not equal to the updated value

// not included

// not necessary to add metadata

// note it doesn't support other MathML elements being component roots

// note we only do this if the vnode is cloned -

// note: this only removes the attr from the Array (attrsList) so that it

// notify change

// now it's used as a new node, overwriting its elm would cause

// nth-* requires argument

// numeric x and y parameters for Expr.filter.CHILD

// numerically zero.

// object ID

// object syntax in v-bind

// object to not be returned from this call. This ensures that doesn't happen.

// object. Either way, the resulting object will be used to initialize

// objects. For full spec compliance, you may wish to configure your

// observe data

// of going through the normal attribute patching process.

// of the default converter is kludgy but it works.

// of the polyfill.

// offset() relates an element's border box to the document origin

// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border

// on a disconnected node (IE 9)

// on detached elements

// on incorrect children. Instead we push them into a queue which will

// on subsequent patches (#3360)

// on the option

// on their elm reference.

// on this.$slots because the usage is semantically a normal slot.

// on[event] is always a function

// one of the nodes is inside shadowDOM, find which one

// onerror should only fire if it's a network error

// only additional allocation required is the completion record, which

// only cast empty string / same name to boolean if

// only for non-scoped slots

// only for non-scoped slots.

// only need to normalize once

// only needed because of broken event delegation on iOS

// only set the status to dragging, when we are actually dragging

// only used in dev mode

// optimize hook:event cost by using a boolean flag marked at registration

// optimize internal component instantiation

// optimize single v-for

// optimized shallow clone

// option in the DOM.

// option.text throws exceptions (#14686, #14858)

// optional / simple context binding

// options

// options in Safari work properly

// or :nth-last-child(...) or :nth(-last)?-of-type(...)

// or a finally block) gives us a place to store values thrown from

// or beginning with the identifier C immediately followed by "-".

// or even between bubbling of the same event (#6566).

// or finish the iteration

// or not, return the runtime object so that we can declare the variable

// or strings [capture 3 or capture 4]"

// or the carousel or its parent isn't visible

// or when there is no matching style property that exists.

// order to produce the correct `offset` value.

// other than props & listeners & slot

// otherwise step value is 2 to skip over Left and Right

// otherwise we skip this part

// otherwise, render a fresh tree.

// othwerise, we use the standard `top`, `left`, `bottom` and `right` properties

// out of sync with VDOM state due to focus, composition and modifiers.

// outer generator.

// outweigh the benefits and it's better off to just always render it fresh.

// override init and inject vuex init procedure

// parent container node also has transition, skip.

// parse arg

// parse expression for getter

// parseFloat NaNs numeric-cast false positives ("")

// parseInt parses a string to a first unavailable symbol

// parser/optimizer/codegen, e.g the SSR optimizing compiler.

// part of the mouse compatibility events on first tap - the carousel

// pass non-declared props as attrs

// pass props

// past first invert threshold, do not restrict inverted threshold to dragEl shadow

// patch existing root node

// percentage; 0 <= x <= 1

// pipe

// plain options object: turn it into a constructor

// pop stack

// position() relates an element's margin box to its offset parent's padding box

// position:fixed elements are offset from the viewport, which itself always has zero offset

// potential patch errors down the road when it's used as an insertion

// pow(2, 53) - 1 == 9007199254740991

// pre

// pre-resolve slots for renderSlot()

// preserve existing history state as it could be overriden by the user

// preserve slot as an attribute for native shadow DOM compat

// prevent arrowElement from being placed not contiguously to its popper

// prevent global pollution for namespaces

// prevent it from double-processed

// prevent triggering an input event for no reason

// preventDefault only for <a> elements (which change the URL) not inside the collapsible element

// private

// problems, please detail your unique predicament in a GitHub issue.

// process for on the main node

// progress_callbacks.lock

// progress_handlers.add( ... )

// progress_handlers.fire

// progress_handlers.lock

// promise.done = list.add

// promise.fail = list.add

// promise.progress = list.add

// prop and event handler respectively.

// properly they must all be removed

// properties to it so it needs to exist.

// props

// proto

// provided DOM node is child of its popper node

// proxy data on instance

// prune oldest entry

// pseudo-class names are case-insensitive

// public mount method

// push text token

// push({ path: '/' }) のようにパス指定ではpropsが受け取れなかったので名前をつける

// push.apply(_, arraylike) throws on ancient WebKit

// put the copy into cache at first

// qSA considers elements outside a scoping root when evaluating child or

// qSa(:focus) reports false when true (Chrome 21)

// query values can be null and undefined

// queue the flush

// rather than make the css module depend on the offset module, just check for it here

// real context instance.

// real proto method for `library`

// record leaving element

// record like context.tryEntries[i].completion. This interface could

// record original tag name for components using "is" attribute

// recursively invoke hooks on child component root node

// recursively search for possible transition defined inside the component root

// redirect and aborted navigation would produce an err == null

// ref

// ref #5318

// reference have enough pixels in conjunction

// reference node. Instead, we clone the node on-demand before creating

// regarding Nodelist length in IE

// regeneratorRuntime in the outer scope, which allows this module to be

// register component module identifier for async chunk inferrence

// register for functional component in vue file

// register in namespace map

// register instance in init hook

// register nested modules

// register root module (Vuex.Store options)

// registered yet, so we call it here.

// reject.

// rejected_callbacks.disable

// rejected_handlers.add( ... )

// rejected_handlers.disable

// rejected_handlers.fire

// relative params

// release circular reference (#6759)

// release memory in IE

// rely on checking whether it's in an inactive tree (e.g. router-view)

// remember that false/true cast respectively to 0/1

// remove __vue__ reference

// remove children as they are returned from scopedSlots now

// remove pending leave element on enter by injecting an insert hook

// remove reference from data ob

// remove self from parent

// remove self from vm's watcher list

// remove slot attribute if the node is resolved as a Vue slot node

// remove the popper if user explicitly asked for the deletion on destroy

// remove trailing segment if:

// remove trailing slash

// remove trailing whitespace node

// remove trailing whitespace node again

// removing structural attributes

// render

// render empty node if no matched route or no config component

// render functions

// render previous view if the tree is inactive and kept-alive

// repaint

// replace old child transition data with fresh one

// replace with listeners with .native modifier

// replaced by innerHTML/textContent retains its parentNode property

// replacing existing element

// reset by the hot-reload-api and we need to do a proper re-render.

// reset current history route

// reset local getters cache

// reset store to update getters...

// reset vm

// resets the popper's position so that the document size can be calculated excluding

// resolve constructor options in case global mixins are applied after

// resolve injections before data/props

// resolve props

// resolve provide after data/props

// resolve relative path

// resolve slots + force update if has children

// resolve template/el and convert to render function

// resolved named direct

// resolved.

// respect <base> tag

// respecting firingIndex overrides and runtime changes

// restores the original style properties after the offsets have been computed

// result, either by returning a { value, done } result from the

// results is for internal usage only

// retrieved value as a content box dimension.

// return a placeholder node for async component, which is rendered

// return a placeholder vnode

// return as we don't need to set up new history listener

// return empty vnode in case the render function errored out

// return handler return value for single handlers

// return in case resolved synchronously

// return placeholder node and queue update when leave finishes

// return previous default value to avoid unnecessary watcher trigger

// return primitive with prefix

// return step by kind

// return that Promise.

// return true when textbox (.number and .trim) loses focus and its value is

// returns true if it also needs a runtime counterpart.

// reuse element for static trees.

// revert to the last existing entry

// root element

// root instance props should be converted

// root state

// run the modifiers

// safe

// safe to exclude.

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// same context.

// same key but different element. treat as new element

// same timestamp type when saving the flush timestamp.

// same way that tag soup parsers do. So we cannot shorten

// save current target element in closure

// save resolved on async factory in case it's used elsewhere

// save route and configProps in cache

// scoped slot

// scoped slots

// scopedId

// second pass: mark static roots.

// see flow/vnode

// seems like flip is trying to loop, probably there's not enough space on any of the flippable sides

// separate value from unit

// separately from one another. Nested component's render fns are called

// sequential events (e.g. #4521, #6690, which have workarounds)

// server build

// set attribute for blank value

// set in CSS while `offset*` properties report correct values.

// set multi drag elements rects to dragRect,

// set new value

// set parent

// set parent vnode. this allows render functions to have access

// set scope id attribute for scoped CSS.

// set state

// set the class

// set up app destroyed handler

// setimmediate attaches itself to the global object

// setting _inactive to false here so that a render function can

// setting a boolean content attribute,

// setting context.delegate to null, and returning the ContinueSentinel.

// setting or getting the value

// setup event listeners, they will take care of update the position in specific situations

// shim for using process in browser

// should work with symbols and should have deterministic property order (V8 bug)

// show clone at dragEl or original position

// show multi drag elements,

// since dynamic options merging is pretty slow, and none of the

// since it considers such accessions noop

// since it's otherwise lost when execution goes async

// since its presence should be enough

// since the default value is a fresh copy,

// since the watcher's initial patch may call $forceUpdate (e.g. inside child

// since they are user-defined.

// size

// skip all element-related modules except for ref (#3455)

// skip if the target getter is not match this namespace

// skip the update if old and new VDOM state is the same.

// skip to window

// slot props are camelized

// slot target

// slot="xxx"

// smaller than it, it means the event is using a hi-res timestamp,

// so $("p:first").is("p:last") won't return true for a doc with two "p".

// so any parsed elements with URLs

// so it gets processed during parent component patch.

// so migrate can support jQuery.sub (gh-2101)

// so that components rendered by router-view can resolve named slots

// so that event delegation works in jQuery.

// so that results are always delivered in the correct order. If

// so that the async generator function has the opportunity to do

// so that the transition module can hand over the control to the directive

// so that we get proper render context inside it.

// so the resolve/reject functions may get called an extra time

// so they're executed at the same time to save the second computation.

// so use a roundabout getElementsByName test

// so we used some reserved tokens during compile.

// some

// some WebKit versions fails with big numbers, some has wrong arity

// some funky global mixins

// some property updates can throw

// some versions of this test; make sure not to make it pass there!

// sortAddClass(evt){

// sortRemoveClass(evt){

// spaces as combinators

// specially universal or its namespaces are a superset of the event's.

// specific event

// specific handler

// stabilize the subscriber list first

// start at index 1 to avoid re-invoking component mounted hook

// start enter transition

// start with a route object that stands for "nowhere"

// starting reference

// state = "rejected"

// state = "resolved" (i.e., fulfilled)

// stateful

// static

// static props are already proxied on the component's prototype

// static style is pre-processed into an object during compilation

// statically analyzing the template at compile time.

// statics

// store all the rest on native weakmap

// store frozen objects on internal weakmap shim

// store injection

// store internal state

// store normalized style under a different key for next diff

// store the computed placement inside `originalPlacement`

// store value as _value as well since

// strange IE + webpack dev server bug - use .call(global)

// strict mode

// strict mode using a global Function call. This could conceivably fail

// strings and numbers (primitives or objects)

// strip full URL origin

// structural directives

// subordinate callback factory

// subordinate fulfillment data

// subsequent errors

// subtract scrollbar size from sizes

// subtraction forces infinities to NaN

// such code is executed in the same order of its modifier

// super option changed,

// support .foo shorthand syntax for the .prop modifier

// support for compiled functional template

// support single function children as default scoped slot

// supports it & if we're not changing the context.

// suppress warnings just in case the user has added

// surrogate pair

// swipe left

// swipe right

// switching focus before confirming composition choice

// synthetic events by interrupting progress until reinvoked in response to

// tag token

// take popper margin in account because we don't have this info available

// target

// teardown watchers

// technically allowfullscreen is a boolean attribute for <iframe>,

// text

// that can be coerced to finite numbers (gh-2662)

// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).

// that causes it, under certain circumstances, to provide the same value for

// that pass the validator function

// that should not be matched to match.

// that takes "flat" options (not to be deep extended)

// the 'y' flag.

// the .value of the Promise<{value,done}> result for the

// the Vue instances at extension time, on the extended prototype. This

// the `nonce` attribute is reset to an empty string whenever it

// the `source` property as a convenience for inlining compiled templates.

// the box of the documentElement, in the other cases not.

// the context vm passed in is a functional context as well.

// the delayed leave may have already been cancelled

// the final result produced by the iterator.

// the first `update` will call `onCreate` callback

// the following are added in 2.6

// the following methods are used to handle overflowing modals

// the generated code of all the slot contents.

// the information will be used for async server-rendering and hydration.

// the master Deferred

// the method takes exactly one argument, since that happens to be true

// the object here.

// the only target envs that have right/middle clicks.

// the other ones will call `onUpdate` callback

// the outer generator.

// the overflowX value there.

// the path list is used to control path matching priority

// the proper solution is to fix the accidental strict mode problem. If

// the raw prop value was also undefined from previous render,

// the ready event fires. See #6781

// the regeneratorRuntime variable at the top of this file.

// the result of another mergeOptions call.

// the root of the child tree

// the select element.

// the size of the popper element itself

// the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and

// the solution is simple: we save the timestamp when a handler is attached,

// the starting route that represents the initial state

// the whole point is ensuring the v-model callback gets called before

// them by ofset X and Y.

// them unless you are aware of the risk.

// then let that catch block handle the exception normally.

// then remove the whole classname (if there was one, the above saved it).

// there doesn't seem to be a better way to do it.

// there is still data from a stopped show/hide

// these are also reactive so they may trigger child update if the child

// these are reserved for web because they are directly compiled away

// these keywords should not appear inside expressions, but operators like

// these unary operators should not be used as property/method names

// they could add new properties to their options configuration

// they need to be reactive so that HOCs using them are always updated

// they will be set as HTML attributes of the element

// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep

// things simple and return the next function itself.

// this also fixes the issue where some browsers e.g. iOS Chrome

// this also recursively registers all sub-modules

// this boolean to detect any flip loop

// this by omitting <tbody> or other required elements.

// this code should be placed here. See #731

// this is a slot using the new v-slot syntax without scope. although it is

// this is a somewhat expensive operation so we skip it

// this is delayed until the app mounts

// this is implemented as a special case to avoid the overhead

// this is just a safety net in case event.timeStamp is unreliable in

// this is necessary for SSR hydration because text nodes are

// this is technically browser-specific, but at least for now browsers are

// this is used to identify the "base" constructor to extend all plain-object

// this just defines when we can count on it).

// this may be a Weex event which doesn't have this method

// this needs to be lazy-evaled because vue may be required before

// this object contains `position`, we want to preserve it along with

// this throws a TypeError, but we will just return undefined.

// this will be called in the instance's injected lifecycle hooks

// this.$el.querySelectorでinput要素のDOMを取得して内部の値を消している

// this.$store.auth.commit('setId')

// this.$store.commit("taskStore/setCardRequestErrorMessages", null);

// this.folderData = data

// this.setId(引数)で利用することが可能になる

// throw an exception if an attempt to read a data cache is made.

// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode

// throw the exception.

// thx d.walsh

// timeout handle

// timestamp can either be hi-res (relative to page load) or low-res

// titleプロパティにフォームの値をセット

// to allow the menu to "escape" the scroll parent's boundaries

// to avoid forcing a reflow.

// to avoid the hashchange listener being fired too early

// to avoid treating leading and trailing

// to create a new function object. We can even get away with assuming

// to force getter re-evaluation for hot reloading.

// to handle uncaught aborts

// to indexed object, toObject with fallback for non-array-like ES3 strings

// to missing dependency), remove it.

// to mutate it.

// to string and cause the type check to miss.

// to the data on the placeholder node.

// todo (fat): these should probably be refactored out of modal.js

// top or left is auto and position is either absolute or fixed

// top/left side

// touch DOM only if `applyStyle` modifier is enabled

// trailing edge, the system time has gone backwards and we're treating

// transform component v-model data into props & events

// transform component v-model info (value and callback) into

// transform existing events in both objects into arrays so we can push later

// transition at this very moment, we make a clone of it and remove

// tree management

// true  -> Array#includes

// true  -> String#at

// try...catch the pushState call to get around Safari

// turn code into functions

// turn off all instance listeners.

// two cases where extra normalization is needed:

// two documents; shallow comparisons work.

// type bitmap

// typeof, instanceof and in are allowed

// uid for batching

// uncached part of the url

// unguarded in another place, it seems safer to define global only for this module

// unhandled rejections tracking support, NodeJS Promise without it fails @@species test

// unified ._invoke helper method.

// unlike a newly created component,

// unset rects & remove from DOM

// unwrap

// update $attrs and $listeners hash

// update __vue__ reference

// update base extend options

// update child tree's parent

// update listeners

// update nested modules

// update parent placeholder node element, recursively

// update props

// update target module

// update vm's placeholder node without re-render

// updated listeners

// updated props

// updates

// urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

// use User Timing api (if present) for more accurate key precision

// use `filter` to obtain the same behavior of `find`

// use `find` + `indexOf` if `findIndex` isn't supported

// use a Vue instance to store the state tree

// use computed to leverage its lazy-caching mechanism

// use default namespace inside foreignObject

// use getRealChild() to ignore abstract components e.g. keep-alive

// use native Set when available.

// use native find if supported

// use native findIndex if supported

// use plain assignment

// use the same hook merging strategy for route hooks

// used by devtools to display a router-view badge

// used by ssr in case component is cached and beforeCreate

// used for static nodes and slot nodes because they may be reused across

// used them during render

// user can override it through ajaxSetup method

// user-attached handlers.

// user-written render functions.

// usernameはログインユーザーの名前。仮にuserがnullの場合に呼ばれてもエラーにならない様に空文字にしている

// using partial to return function with only arguments preserved in closure environment.

// utils is a library of generic helper functions non-specific to axios

// v-bind

// v-bind data wrap

// v-bind dynamic argument wrap

// v-bind with dynamic arguments must be applied using the same v-bind object

// v-html and domProps: innerHTML

// v-if with v-once should generate code like (a)?_m(0):_m(1)

// v-on

// v-on data wrap

// v-once

// v-once cached trees

// v-slot on <template>

// v-slot on component, denotes default slot

// v8 likes predictible objects

// val could be undefined for unregistration

// validation and default values are handled in the child

// variable length - can't use forEach

// variable specified by delegate.resultName (see delegateYield).

// via an object.

// via either native Promise.then or MutationObserver.

// vue-draggableに指定するオプションを切り出し

// vue-draggableをLaravelと連携するメソッド

// vue-draggableオプションをメソッドに切り出し

// vue-router#1212

// vue-routerプラグインの読み込み

// vue-server-renderer can set VUE_ENV

// vuexで使用するストアの読み込み

// w/o altered newTarget, lot of arguments case

// w/o altered newTarget, optimization for 0-4 arguments

// wait until re-render finishes before scrolling

// want to modify the value if it is a CSS custom property

// want to query the value if it is a CSS custom property

// warn about them ASAP rather than swallowing them by default.

// warn against non-factory defaults for Object & Array

// warn against non-primitive key

// warn if v-bind:value conflicts with v-model

// warn invalid mode

// warn multiple elements

// we are not using Vue's default async resolving mechanism because

// we are only extracting raw values here.

// we can re-enable the events: touchmove/mousemove

// we can reuse the same tree.

// we divide the work into three loops to avoid mixing DOM reads and writes

// we do not release the router so it can be reused

// we do not want to evaluate the getters in this time.

// we do this before each modifier to make sure the previous one doesn't

// we do this only on HTML because it's the only element that behaves

// we don't need to get elem css if it isn't even overflowing in the first place (performance)

// we have a recursively passed down rm callback

// we know it's MountedComponentVNode but flow doesn't

// we make this check conditional for performance reasons

// we need to do this before overwriting $options._renderChildren.

// we set this to vm._watcher inside the watcher's constructor

// we want to halt the navigation until the incoming component has been

// we want to recursively retrieve the real component to be rendered

// weak collections should not contains .clear method

// webpackBootstrap

// well.

// when a statically positioned element is identified

// when an event is called after a page has unloaded

// when in an optgroup

// when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)

// when parent component is patched.

// when the value is the same, because the value may

// when using Object.defineProperty, so we have to procedurally build up

// when we don't find a shadow root

// when when somebody has screwed with setTimeout but no I.E. maddness

// whenever `document.activeElement` is accessed on an iframe

// where `global.postMessage` means something completely different and can't be used for this purpose.

// where microtasks have too high a priority and fire in between supposedly

// whether the request URL is of the same origin as current location.

// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order

// which value to return, respectively either:

// while folding, and so that we can capture them again because old sortable will no longer be fromSortable

// will be set to same as swapThreshold if default

// will dequeue but only if they were gotoEnd.

// will not be confused with a leftover capture object.

// will result in `undefined` for elem = this[ 0 ] which will

// will return status as 0 even though it's a successful request

// will use the other one

// window.location.protocol + '//' + window.location.host

// with altered newTarget, not support built-in constructors

// with both ajaxSettings and settings fields.

// with direct calls to dataPriv methods, these can be deprecated.

// with hand-written render functions / JSX. In such cases a full normalization

// with {} we create a new object with the options inside it

// without getting yelled at by flow

// without the position applied we can't guarantee correct computations

// work around Firefox bug #1540995

// work around Firefox's Object.prototype.watch...

// work around IE bug when accessing document.activeElement in an iframe

// work around flow

// work around weird flow bug

// would stop cycling until user tapped out of it;

// wrap

// wrap a state change and reset it upon exiting the pre node.

// wrapped in strict mode code which doesn't define any globals.  It's inside a

// wrapper function for providing a more flexible interface

// wtf flow?

// xml :nth-child(...)

// you can add your own custom options here if

// you've misconfigured your bundler to force strict mode and applied a

// {

// {display: ["-webkit-box", "-ms-flexbox", "flex"]}

// }

// },

// お問い合わせバリデーション（Email）

// お問い合わせバリデーション（お名前）

// お問い合わせバリデーション（お問い合わせ内容）

// お問い合わせバリデーション（件名）

// お問い合わせページ

// こうしなければ、Laravel側で$requestで受け取る際に、keyが無いものとしてnull値になってしまう

// ここでストアへフォルダーIDを登録

// ここのキーとフォームリクエストクラスのバリデーションで指定したキーを同じにしてないと、

// ここをコメントアウトすると419エラーが出る（csrf用のトークンが無い）

// これでkey:valueの形でデータをコントローラーへ渡せる

// どのAPI呼び出し時でも共通だったので、インターセプターにまとめる

// アクションは第2引数までしか引数を受け取れないので、

// アクションへディスパッチするメソッドを呼ぶ

// アクションへファイル情報を渡す

// アプリケーション的に意味のある数字がハードコードされるのを避けるためにステータスコードの定義を追加

// エラーページ

// エラーメッセージがあった際にストアより取得

// エラーメッセージが出ていたら消す

// エラーメッセージを格納する

// エラー時のレスポンスはエラーメッセージそのものではなく、レスポンスオブジェクトを返すと言う処理が

// カラムで指定している名前と合わせる(card_id)

// カードのソート機能

// カードのタイトルを更新する

// カードの並び替え

// カードの作成

// カードの削除

// カードの更新フォームをキャンセルしたときの動作

// カードの更新フォームを呼び出す動作

// カードを作るためにセットしたフォルダーIDを一度リセットする

// カードを削除する

// カードタイトルの更新

// キャンセルしたときに、propsで渡ってきている元のデータをdataプロパティに代入する。

// クリエイトライフサイクルフック

// クリックしたフォルダーのIDとVuexに格納されている現在のフォルダーIDが

// ゲストユーザーログイン用

// コールバックページ

// ステータスコード200以外の時の処理

// ストアからフォルダーIDを呼び出す

// ストアのステートを算出プロパティで参照し、それをウォッチャーで監視する

// ストアのユーザー情報をクリア

// ストア内のカードリストを参照し、priorityプロパティを更新する

// ストア情報に取得したユーザーIDを入れる

// スマートフォンサクセスだった場合

// タスクの作成

// タスクの削除

// タスクを作成

// タスクタイトルの更新

// タスクデータをステートへ格納

// タスクリストのソートを更新するアクションを呼ぶ

// タスクリストのソート更新

// タスクリストの列の入れ替えを更新するアクションを呼ぶ

// タスクリストの列の入れ替え更新

// タスク登録後、フォームの内容を空にして非表示にする

// タスク管理ページ

// ナビゲーションガード

// バックエンド側でセッションを削除しているので、一旦リロードさせる

// バリデーションエラーが表示されていたら閉じる際に消去する

// バリデーションエラーに引っかかった時の処理

// パスワードリセット

// パスワードリセットするために必要なToken

// パスワードリセットアクション時のエラーメッセージ監視（Email）

// パスワードリセットアクション時のエラーメッセージ監視（Password）

// パスワードリセットメール送信時のエラーメッセージ用ミューテーション

// パスワードリセットメール送信時のエラーメッセージ監視（Email）

// パスワードリマインダー

// パスワードリマインダー時のエラーハンドリング

// パスワード変更

// パスワード変更バリデーション（新しいパスワード）

// パスワード変更バリデーション（現在のパスワード）

// パスワード変更メッセージが出力されていたら消去する

// ファイルが画像でなかったら処理を中断

// ファイルを読み込み終わったタイミングで実行する処理

// ファイルを読み込む

// ファイル情報をdataプロパティに保存

// フォルダのソート機能

// フォルダーのタイトルを更新する

// フォルダーの並び替えの更新

// フォルダーの作成

// フォルダーの削除

// フォルダーを削除する

// フォルダーを選択したら、そのフォルダーのカードリストをセットする

// フォルダータイトルの更新

// フォルダー削除後のデータをセットする

// フォルダー配下のカードをステートにセットするアクション

// フォームでファイルが選択されたら実行

// プライバシーポリシー

// プロフィールのフォームデータ

// プロフィールバリデーションメッセージをセット

// プロフィールページ

// プロフィール写真のパスをセット

// プロフィール写真のパスを呼び出す

// プロフィール写真変更

// プロフィール画像保存の処理

// ページ下部のリンクから他のページに飛んでも、画面の位置を初期の位置に移動させるための処理

// ボタン表示フラグ

// ミューテーションへコミットする

// メソッドを使うために配列を定義

// モーダルを閉じるイベントを親コンポーネントに渡す

// ユーザーIDをセット

// ユーザー削除

// ユーザー名をセット

// ユーザー登録ページ

// リダイレクト用

// ルーティング用ページ

// レスポンスのエラーメッセージを格納

// レスポンスコードをステートから取得する

// レスポンスコードを元に、どの様なエラーか判断する

// レスポンスコードを格納するためのステート（200 403 500など）

// レスポンスメッセージをセット

// ログインステータスを変更する

// ログインチェックに使用。確実に真偽値を返すために二重否定をしている

// ログインページ

// ログインページにアクセスした際に、認証済みだったらタスクページに移動する

// ログイン時のエラーハンドリングのためのミューテーション

// ログイン時のエラーメッセージの監視（Email）

// ログイン時のエラーメッセージの監視（Password）

// ログイン状態を更新

// ログイン画面へ

// ローディング画面の表示フラグ

// 会員登録時のエラーハンドリング用ミューテーション

// 例外発生時でも、Laravel側でログアウトしているのでストアに持たせたログイン情報は削除する

// 全てのデータをステートにセット

// 処理が成功した際の格納されたレスポンスメッセージを取得する

// 利用規約

// 削除後のデータセットはフォルダー選択保持の為、setCardListsActionで行う

// 名前変更

// 常にリクエストが空とみなされてバリデーションに引っかかる

// 成功時のレスポンスはそのまま使う

// 投稿の内容をアクションへ渡す

// 投稿後にフォームの中身を削除し、フォームを非表示にする

// 新規登録ページにアクセスした際に、認証済みだったらタスクページに移動する

// 新規登録時のエラーメッセージの監視（Email）

// 新規登録時のエラーメッセージの監視（Name）

// 新規登録時のエラーメッセージの監視（Password）

// 更新フォームがキャンセルされたとき

// 更新後のデータセットはフォルダー選択保持の為、setCardListsActionで行う

// 更新後データが更新されるので、選択されていたフォルダーを保持するための処理

// 更新用のフォームを呼び出す

// 画像プレビューフラグ

// 画像変更

// 画面遷移時にコンポーネントにメッセージを渡す

// 登録後のメッセージ表示フラグ

// 第1引数にはコンテキストオブジェクトが渡される。その中にはcommitなどのメソッドが入っている

// 第2引数にはサーバーから返却されたデータが入っている。何を返すかはコントローラー側で記述する

// 複数のデータをアクションへ渡すには、オブジェクト形式で渡す。

// 認証済みでなかったらログイン画面へ遷移

// 読み込まれたファイルはデータURL形式で受け取れる

// 追加後のデータセットはフォルダー選択保持の為、setCardListsActionで行う

// 送信後入力フォームを空にする

// 通信が成功（apiStatusがtureの場合）したら移動する

// 通信成功時のアクション

// 違った場合にDBへフォルダー配下のタスクデータを取得しに行く

// 選択されているフォルダーに背景色のクラスをつけるための判定を行う

// 順番が入れ替わった際に、現在のpriorityに1を足すことで入れ替わったリストの情報をLaravel側に通知する

//normal enviroments in sane situations

//vue-routerのインスタンス化

//{ root: ture }で違うファイルのミューテーションを呼べる
